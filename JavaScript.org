#+TITLE: Java Script
* JavaScript 第一部分
** 简介
是世界上最流行的前段变成语言，可用于 HTML 和 WEB，可广泛应用于服务、PC、笔记本电脑、平板电脑和智能手机等设备。
- JavaScript 是一种脚本语言
- JavaScript 是一种轻量级的语言
- JavaScript 是可插入 HTML 页面的变成代码
- JavaScript 插入 HTML 页面开后，可由所有的现代浏览器执行。
JavaScript 是一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。
在 1995 年时，由 Netscape 公司的 Brendan Elch，花了两个星期的时间，在网景导航者浏览器上设计实现而成。
因为 Netscape 和 Sun 合作，Netscape 管理层希望它外观看起来像 Java，因此取名为 JavaScript，但实际上和 Java 没有关系。
为了取得技术优势，微软推出了 JScript，CENvi 推出了 ScriptEase，与 JavaScript 同样可在浏览器上运行，为了统一规格，因此 JavaScript 兼容于 ECMA 标准，因此也称为 ECMAScript。
完整的 JavaScript 实现包含三个部分：ECMAScript、文档对象模型 DOM、浏览器对象模型 BOM。
*** JS 能做什么？
**** 写入 HTML 输出
#+begin_src js
    <body>
    <p>
    Javascript能够直接写入HTML输出流中：
</p>
    <script>
    document.write("<h1>This is a heading</h1>");
document.write("<p>This is a paragraph</p>");
</script>
    <p>
    您只能在HTML输出流中使用<strong>document</strong>。
如果您在文档已加载后使用它(比如函数中)，会覆盖整个文档。
</p>
    </body>
#+end_src
**** 对事件做出反应
=<button type="button" onclick="alert('haha');">点击这里</button>=
alert（）函数用于代码测试非常方便。
Onlick 事件是 js 众多事件之一
**** 改变 HTML 内容
使用 JavaScript 来处理 HTML 内容是非常强大的
#+begin_src js
    <p id="demo">
    JavaScript能改变HTML元素的内容>
    </p>
    <!-- 对事件做出反应 -->
    <script>
    function myFunction()
{
    var x=document.getElementById("demo"); //找到元素
    x.innerHTML="Hello JavaScript!"; //改变内容
}
</script>
#+end_src
**** 改变 HTML 属性
#+begin_src js
    <script>
    function changeImage()
{
    var element=document.getElementById("myimage")
    if (element.src.match("button"))
    {
        element.src="eg_bulboff.jpg";
    }
    else
    {
        element.src="eg_bulbon.jpg";
    }
}
</script>
    <img id="myimage" onclick="changeImage()" src="eg_bulboff.jpg">
    <p>点击灯泡来点亮或熄灭这盏灯</p>
    </script>
#+end_src
**** 改变 HTML 样式
改变 HTML 元素的样式，属于改变 HTML 属性的变种
#+begin_src js
    <!-- 改变HTML样式 -->
    <h1>我的第一段JavaScript</h1>
    <p id="demo1">
    Javascript能改变HTML元素的样式。
</p>
    <script>
    function myFunction1()
{
    var y=document.getElementById("demo1") //找到元素
    y.style.color="#ff0000";  //改变样式
}
</script>
    <button type ="button" onclick="myFunction1()" >点击这里</button>
#+end_src
1. 设置出发的位置
2. 编写 JS 的函数 （获取要修改的对象然后对对象修改）
**** 验证输入
JavaScript 常用于验证用户的输入
#+begin_src js
    <!-- 验证用户的输入 -->
    <h2>我的第一段JavaScript</h2>
    <p>请输入数字，如果输入值不是数字，浏览器会弹出提示框。</p>
    <input id="demo2" type="text">
    <script>
    function myFunction2()
{
    var z=document.getElementById("demo2").value;
    if(z==""||isNaN(z))
    {alert("Not Numeric");}
}
</script>
    <button type="button" onclick="myFunction2()">点击这里</button>
#+end_src
(z==""||isNaN(x))如果为空或者不是数字
*** 如何使用 js
**** 代码存放位置
1. 嵌入在代码内部的，比如上面 =<button type="button" onclick="alert('haha');">点击这里</button>=
2. 放在<script></script>标签内：
   1.) 第一种情况是嵌入在<head></head> ，通常用于提纲挈领型的 js 代码。
   2.) 立刻接在<body>后面，*通常是不可取的*。或者写在<body>当中也一样
   3.) 写在</body>结束标签的前面，优先推荐。且优先级最高。
   因为加载页面是一行行向下加载的，很多的时候 js 代码可能会比较复杂也可能出现出错的情况。导致所有后面的页面都在等待。
3. 放在.js 文件内，然后通过*<script src="..."></script>*引用, 同样也存在编排位置的问题。
推荐使用方法：以.js 文件的方式保存代码，然后在 body 标签的最底部引用代码。
把 JavaScript 代码放入一个单独的.js 文件中更利于维护和重用代码。可以在同一个页面中引入多个.js 文件，可以在页面中多次编写，浏览器按照顺序一次执行。将 JavaScript 代码引用放在 body 标签的最底部可以放置 js 代码执行有错或耗时过长的时候 html 主体页面能够正常显示。
新手一定要注意：.js 文件中不需要<script></scipt>标签。
<head>或<body>中引用脚本文件是可以的。jquery 的调用必须要在.js 前面。
**** JavaScript 没有任何打印或者输出的函数。
JavaScript 可以通过不同的方式输出数据：
a. 使用 window.alert()弹出警告框。 类似 python 中的 print()
b. 使用 document.write()方法将内容写到 HTML 文档中。
c. 使用 innerHTML 写入到 HTML 元素。
d. 使用 console.log()写入到浏览器的控制台。
#+begin_src js
    <script>
    function myFun(){
        var x=document.getElementById("demo");
        x.innerHTML = "make some change";
        console.log(x.innerHTML)
    }
.....
#+end_src
进入 chrome 浏览器控制台（Console)，直接输入 JavaScript 代码，按回撤后执行。要查看一个变量的内容输入 console.log(a);回车后显示。
** JavaScript 语法
*** JavaScript 语句
Javascipt 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。
下面的 JavaScript 语句向 id="demo"的 HTML 元素输出"Hello World":
=document.getElementById("demo").innerHTML="hellow World";=
**** 分号；
分号用于分隔 JavaScript 语句，在每条可执行的语句结尾添加分号。
在 JavaScript 中，用分号来结束语句是可选的，但为了代码规范，请务必添加。
JS 按顺序执行代码中的每一条语句。
**** JavaScript 代码块：
JavaScript 语句通过代码块的形式进行组合。
块由左花括号开始，由右花括号结束。
块的作用是使语句序列一起执行。
***** JavaScript 对大小写敏感
***** JavaScript 会忽略多余的空格。
***** 可以在*文本字符串*中使用反斜杠对代码行进行换行
#+begin_src js
document.write("Hello \
World!");

document.write \
("Hello World!"); 这种不可以
#+end_src
**** JavaScript 变量
1. 变量名是大小写英文、数字、$和_的组合，且不能用数字开头。
2. 申明一个变量用 var 关键字，该变量默认为局部变量。
3. 如果第一次声明变量未添加 var 关键字，则为全局变量。
4. strict 模式：强制使用 var 申明变量，未使用将导致运行错误。使用方法：js 代码的第一行添加'use strict';
使用 var 关键词来声明变量：
=var carname;=
变量声明之后，该变量是空的（它没有值）。
如需向变量赋值，请使用等号：
=carname="Volvo";=
也可以在声明变量时对其赋值；
=var carname="Volvo";=
***** JS 保留关键字
| 关键字   | 关键字     | 关键字     | 关键字       |
|----------+------------+------------+--------------|
| abstract | else       | instanceof | super        |
| boolean  | enum       | int        | switch       |
| break    | export     | interface  | synchronized |
| byte     | extends    | let        | this         |
| case     | false      | long       | throw        |
| catch    | final      | native     | throwster    |
| char     | finally    | new        | transient    |
| class    | float      | null       | true         |
| const    | for        | package    | try          |
| continue | function   | private    | typeof       |
| debugger | goto       | protected  | var          |
| default  | if         | public     | void         |
| delete   | implements | return     | volatile     |
| do       | import     | short      | while        |
| double   | in         | static     | with         |
*** JavaScript 数据类型
包括字符串、数字、布尔、数组、对象、Null、Undefined
JavaScript 拥有动态类型，相同的变量可用作不同的类型：
var x     //x 为 undefined
var x=6； //x 为数字
var x="Bill"; //x 为字符串
查看数据类型使用 typeof，请一定注意其中几个特殊情况！
typeof“John”  // 返回 string
typeof 3.14   //返回 number
typeoffalse   //返回 boolean
typeof [1,2,3,4]  //返回 object
typeof {name:'John', age:34}  //返回 object
typeof new Date()   //返回 object
typeof function (){}  //返回 function
typeof myCar    //返回 undeifined（如果 myCar 没有声明）
typeof null   //返回 object
typeof undefined  //undefined
null === undefined  //false
nul == undeifned  //true
**** 字符串
字符串是存储字符（比如"Bill Gates")的变量。可以使用单引号或双引号：
var carname="Bill Gates";
var carname='Bill Gates';
可以在字符串中使用引号，只要不匹配包围字符串的引号即可：
var answer="Nice to meet you!";
var answer="He is called'Bill'";
var answer='He is called "Bill"'
**** 数字
Javascript 只有一种数字类型。数字可以带小数点，也可以不带：
var x1=34.00 //使用小数点来写
var x2=34;    //不使用小数点来写
var y=123e5    // 12300000
var z=123e-5    //0.00123
**** 布尔
布尔（逻辑）只有两个值：true 或 false。注意和 Python 大小写的区别！
var x=true
var y=false
**** 数组
类似 Python 的列表。例如创建名为 cars 的数组：
var cars=new Array();
cars[0]="Audi";
cars[1]="BMW";
cars[2]="Volvo";
或者：
var cars=new Array("Audi","BMW","Volvo");
或者
var cars=["Audi","BMW","Volvo"];
数组下标是基于零的，所以第一个项目是[0],第二个是[1],以此类推。
**** 对象 object
*这里的对象不是指面向对象编程中的对象，而是类似 Python 的字典数据结构。*
JS 的对象由花括号分隔。在括号内部，对象的属性以名称和值的形式(name:value)来定义。属性由逗号分隔：
var person={firstname:"Bill",lastname:"Gates",id:5566};
上面的例子中的对象（person）由三个属性：firstname、lastname 以及 id。
空格和折行无关紧要。声明可横跨多行：
var person={
firstname:"Bill",
lastname:"Gates",
id: 5566
};
对象属性有两种寻址方式：
name=person.lastname;
name=person["lastname"];
**** Undefined 和 Null
Undefined 这个值表示变量不含有值。
可以通过将变量的值设置为 null 来清空变量。
cars=null;
person=null;
**** 声明变量类型
当声明新变量时，可以使用关键字“new“来声明其类型：
var carname=new String;
var x=new Number;
var y=new Boolean;
var cars=new Array;
var person=new Object;
**** 数据类型的转换
注意大小写！
| String()          | 转换为字符串                                       |
| Number()          | 将字符串转换为数字                                 |
| number.tostring() | 例如：（123）.toString()                           |
| toExponential()   | 把对象的值转化为指数计数法                         |
| toFixed()         | 把数字转化为字符串，结果的小数点后有指定位数的数字 |
| toPrecision()     | 把数字格式化为指定的长度                           |
| parseInt(..)      | 把某值转化成数字，不成功 NaN                        |
| parseFloat(..)    | 把某值转化成浮点数，不成功则 Nan                    |
**** 再谈字符串
1. 字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但也没有任何效果：
2. \n 表示换行， \t 表示制表符，\\表示\，\x##形式为十六进制，\u##表示一个 unicode 字符。
3. 最新的 ES6 标准新增了多行字符串的表示方法，用两个反引号将多行引起来。
4. 拼接字符串使用+号
5. 格式化字符串的方法：注意要用反引号，不能是单引号或双引号。
var name="小明";
var age=20;
alert(`你好，${name},你今年${age}岁了！`);
*注意符号* 反引号类似 python 的 format()
JavaScript 为字符串提供了一些常用方法，调用这些方法本身并不会改变原油字符串的内容，而是返回一个新的字符串：
| obj.length                       | 长度                                                    |
| obj.trim()                       | 移除空白                                                |
| obj.trimLeft()                   |                                                         |
| obj.trimRight()                  |                                                         |
| obj.charAt(n)                    | 返回字符串中的第 n 个字符                                 |
| obj.concat(value,...)            | 拼接                                                    |
| obj.indexOf(bustring,start)      | 子序列位置                                              |
| obj.lastIndexOf(substring,start) | 子序列位置                                              |
| obj.substring(from, to)          | 根据索引获取子序列                                      |
| obj.slice(start,end)             | 切片                                                    |
| obj.toLowerCase()                | 小写                                                    |
| obj.toUpperCae()                 | 大写                                                    |
| obj.split(delimiter,limit)       | 分割                                                    |
| obj.search(regexp)               | 从头开始匹配，返回匹配成功的第一个位置（g无效）         |
| obj.match(regexp)                | 全局搜索，如果正则中有 g 表示找到全部，否则只找到第一个。 |
| obj.replace(regexp,replacement)  | 替换，正则中有 g 则替换所有，否则只替换第一个匹配想，$数字：匹配的第 n 个组的内容，$&L:当前匹配的内容；$`:位于匹配子串左侧的文本；$'：位于匹配子串右侧的文本；$$:直接量$符号 |
**** 再谈数组
1. 直接给 Array 的 length 赋一个新的值会导致 Array 大小的变化。
2. 通过索引赋值时，如果索引超过了范围，同样会引起 Array 大小的变化，这点和 Python 不一样，python 会弹出异常
3. js 对数组的索引没有较强的保护，容易出现问题，请一定注意
下面是数字的常用方法
| obj.length                                 | 数组的大小                       |
| obj.push(ele)                              | 尾部追加元素                     |
| obj.pop()                                  | 尾部捕获一个元素                 |
| obj.unshift(ele)                           | 头部插入元素                     |
| obj.shift()                                | 头部移除元素                     |
| obj.splice(start, deleteCount, value, ...) | 插入、删除或替换数组的元素       |
| obj.splice(n,0,val)                        | 指定位置插入元素                 |
| obj.splice(n,1,val)                        | 指定位置替换元素                 |
| obj.splice(n,1)                            | 指定位置删除元素                 |
| obj.slice()                                | 切片                             |
| obj.reverse()                              | 反转                             |
| obj.join(sep)                              | 将数组元素连接起来构成一个字符串 |
| obj.concat(val,..)                         | 连接数组                         |
| obj.sort()                                 | 对数组元素进行排序               |
下面是一些例子，请注意其中的注释：
#+begin_src js
var arr=[10,20,'30','xyz'];
arr.indexOf(30); //元素30没有找到，返回-1

var arr=['A','B','C','D','E','F','G'];
arr.slice(0,3); //从索引0开始，到索引3结束，但不包括索引3

arr.slice(3); //从索引3开始到结束
var aCopy = arr.slice()
aCopy: //['A','B','C','D','E','F','G'];
aCopy === arr; false
#+end_src

#+begin_src js
var arr=[1,2];
arr.push('A','B'); //返回Array的新长度：4
arr; // [1,2,'A','B']
arr.pop(); //pop()返回'B'
arr; //[1,2,'A']
arr.pop(); arr.pop(); arr.pop(); //连续3次pop arr；//[]
arr.pop();  //空数组继续pop不会报错，而是返回undefined
arr; //[]
#+end_src

#+begin_src js
var arr=[1,2]
arr.unshift('A','B'); //返回Array新的长度：4
arr; //['A','B',1,2]
arr.shit(); //'A'
arr; //['B',1,2]
arr.shift(); arr.shift(); arr.shit(); //连续shift 3次
arr; //[]
arr.shift(); //空数组继续shift不会报错，而是返回undefined
arr; //[]
#+end_src

#+begin_src js
//splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素。
ar arr=['Microsoft','Apple','Yahoo','AOL','Excite','Oracle'];
//从索引2开始删除3个元素，然后再添加2个元素；
arr.splice(2,3,'Google','Fackbook'); //返回删除的元素['Yahoo','AOL','Excite']
arr;//['Microsoft','Apple','Google','Facebook','Oracle']
//只删除不添加；
arr.splice(2,2); //['Google','Facebook']
arr; //['Microsoft','Apple','Oracle']
//只添加不删除：
arr.splice(2,0,'Google','Facebook'); //返回[]，因为没有删除任何元素
arr; //['Microsoft','Apple','Google','Fackbook','Oracle']
#+end_src
#+begin_src js
//concat()方法并没有修改当前Array,而是返回了一个新的Array。接受任意个元素和Array,并且自动把Array拆开，然后全部添加到新的Array里。
var = ['A','B','C'];
acc.concat(1,2,[3,4]); //['A','B','C',1,2,3,4]
#+end_src
**** 再谈对象
对象是一种无序的集合数据类型，它由若干键值对组成。
访问属性是通过.操作完成的，但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用"括起来，并以方括号进行访问。
访问不存在的属性不报错，而是返回 undefined
可以自由地随时给一个对象添加或删除属性，就像 python 一样
要检测对象是否拥有某一属性，可以用 in 操作符。但这个属性有可能是对象继承得来的。例如"toString“就是所有对象的属性，因为 toString 定义在 object 对象中，而所有对象最终都会在原型链上指向 object。
要判断一个属性是否是对象自身拥有的，而不是继承得到的，可以用 hasOwnProperty()方法。
#+begin_src js
var xiaoming={
    name:'小明'
};
xiaoming.age; //undefined
xiaoming.age=18; //新增一个age属性
xiaoming.age; //18
delete xiaoming.age //删除age属性
xiaoming.age; //undefined
delete xiaoming['name']; //删除name属性
xiaoming.name; //undefined
delete xiaoming.school; //删除一个不存在的school属性也不会报错
'name' in xiaoming; //true
'grade' in xiaoming; //false
'toString' in xiaoming; //true
xiaoming.hasOwnProperty('name'); //true
xiaoming.hasOwnProperty('toString'); //false
#+end_src

*** JS 运算符
**** 算数运算符
算数运算符用于执行变量与/或值之间的算数运算。
给定   y=5，下面的表格解释了这些算数运算符：
| 运算符 | 描述   | 例子  | 结果  |
|--------+--------+-------+-------|
| +      | 加     | x=y+2 | x = 7 |
| -      | 减     | x=y-2 | x=3   |
| *      | 乘     | x=y*2 | x=10  |
| /      | 除     | x=y/2 | x=2.5 |
| %      | 求余数 | x=y%2 | x=1   |
| ++     | 累加   | x=++y | x=6   |
| --     | 递减   | x=--y | x=4   |
**** 赋值运算符
赋值运算符用于给变量赋值
给定 x=10 和 y=5，下面的表格解释了赋值运算符
| 运算符 | 例子  | 等价于 | 结果 |
|--------+-------+--------+------|
| =      | x=y   |        | x=5  |
| +=     | x+=y  | x=x+y  | x=15 |
| -=     | x-=y  | x=x-y  | x=5  |
| *=     | x*=y  | x=x*y  | x=50 |
| /=     | x/y=y | x=x/y  | x=2  |
| %=     | x%=y  | x=x%y  | x=0  |

**** 比较运算符
比较运算符在逻辑语句中使用，以测定变量或值是否相等。
给定 x=5 ，下面的表格解释了比较运算符
| 运算符 | 描述           | 例子                        |
|--------+----------------+-----------------------------|
| ==     | 等于           | x==8 为 false                |
| ===    | 全等（值和类型 | x===5 为 true；x==="5"为 false |
| ！=    | 不等于         | x！=8 为 true                 |
| >      | 大于           | x>8 为 false                  |
| <      | 小于           | x<8 为 true                   |
| >=     | 大于或等于     | x>=8 为 false                 |
| <=     | 小于或等于     | x<=8 为 true                  |
| !==    | 全不等于       |                             |
**** Boolean 运算符
Boolean 运算符有三种： ！、&&和||
抽象操作 ToBoolean 将其参数按照下表中的规则转化为逻辑值
| 参数类型  | 结果 ｜                                         |
|-----------+-------------------------------------------------|
| Undefined | false                                           |
| Null      | false                                           |
| Boolean   | 结果等于输入的参数（不转换）                    |
| Number    | 如果参数为+0,-0 或 NaN，则结果为 false；否则为 true |
| String    | 如果参数为字符串，则结果为 false，否则为 true     |
| Object    | true                                            |
#+begin_src js
var bFound=false;
var i=0
while(!bFound){
    if(aValue[i]==vSearchValues){
        bFound=true;}
    else{
        i++;

    }
#+end_src
**** 等号和非等号
在 ECMAScript 中，等号由双等号（==）表示，当且仅当两个运算数相等时，它返回 true。非等号由感叹号加等号（！=）表示，当且仅当两个运算数不相等时它返回 true。当确定两个运算数是否相等，两个运算符都会进行类型转换。
| 表达式          | 值    |
|-----------------+-------|
| null==Undefined | true  |
| "NaN"==NaN      | false |
| 5==NaN          | false |
| NaN==NaN        | false |
| NaN!=NaN        | true  |
| false==0        | true  |
| true==1         | true  |
| true==2         | false |
| undefined==0    | false |
| null==0         | false |
| null==0         | false |
| "5"==5          | true  |
**** 全等和非全等号
等号和非等号的同类运算符是全等号和非全等号。这两个运算符所做的与等号和非等号相同，只是它们在检查相等性前，不执行类型转换。
全等号由三个等号表示（===），只有在无需类型转换运算数就相等的情况下，才能返回 true。例如：
#+begin_src js
var sNum="66";
var iNum=66;
alert(sNum==iNum);//输出"True"
alert(sNum===iNum); //输出"false"
#+end_src
第一个 alert 使用等号来比较数字“66”和数字 66， 输出“true”。这是因为字符串“66”将被转化成数字 66， 然后才与另一个数字 66 进行比较。第二个 alert 使用全等号在没有类型转换的情况下就比较字符串和数字，当然，字符串不等于数字，所以输出“false”。同理：
#+begin_src js
var sNum="66"
var iNum=66;
alert(sNum!=iNum); //输出"false"
alert(sNum!=iNum);//输出"true"
#+end_src
**** 条件运算符：
也叫三目运算符：
=variable=boolean_expression?true_value:false_value;=
该表单是主要是根据 boolean_expression 的计算结果有条件的为变量赋值。如果 Boolean_expression 为 true，就把 true_value 赋给变量；如果它是 false，就把 false_value 赋给变量。
例如:
=var iMax=(iNum1>iNum2)?iNum1:iNum2;=
在栗子中，iMax 将被赋予数字中的最大值，表达式声明如果 iNum1 大于 iNum2，则把 iNum1 赋予 iMax。但如果表达式为 false（即 iNum2 大于或等于 iNum1），则把 iNum2 赋予 iMax
*** JavaScript 函数
函数是由时间驱动的或者当它被调用时执行的可重复使用的代码块。同样使用 return 语句返回函数。函数是包裹在花括号中的代码块，前面使用关键词 function：
#+begin_src js
function functioname()
{
    这是是要执行的代码
}
#+end_src
可以在某事件发生时直接调用函数（比如当用户点击按钮时），也可以由 JavaSricpt 在任何位置进行调用。
可以发送任意多的参数，由逗号(,)分隔：
myFunction(argument1,argument2)
#+begin_src js
    <button onclick="myFunction('Bill Gates','CEO')">点击这里</button>
    <script>
    function myFunction(name,job)
{
    alert("Welcome"+name+",the"+job);
}
</script>
#+end_src
**** 局部变量
在 javascript 函数内部声明的变量（使用 var）是局部变量，只能在函数内部访问它。
可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。
只要函数运行完毕，局部变量就会被删除。
**** 全局变量
在函数外声明的变量是全局变量，网页上的所有脚本和函数都能访问它。
**** 变量的生存期
JavaScript 变量的生命期从它们被声明的时间开始。局部变量会在函数运行以后被删除。全局变量会在页面关闭后被删除。
**** 向未声明的变量分配值
如果值赋给尚未声明的变量，该变量将被自动作为全局变量声明。
这条语句：
=carname="Volvo";=
将声明一个全局变量 carname，即使它在函数内执行，var 关键字很重要！
**** delete
delete 运算符删除以前定义的对象属性或方法的引用。例如：
#+begin_src js
var o = new Object;
o.name = "David";
alert(o.name); // 输出"David"
delete o.name;
alert(o.name); //输出"Undefined"
#+end_src
在这个栗子中，删除了 name 属性，意味着强制解除对它的引用，将其设置为 undefined（即创建的未初始化的变量的值）
delete 运算符不能删除开发者未定义的属性和方法。例如，下面的代码将引发错误：delete o.toString;
即使 toString 是有效的方法名，这行代码也会引发错误，因为 toString()方法是原始的 ECMAScript 方法，不是开发者定义的。
*** JavaScript 条件控制
**** if...else 语句
可以使用以下条件语句：
- if 语句 - 只有当指定条件为 true 时，使用该语句来执行代码
- if...else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码
- if...else if...else 语句 - 使用该语句来选择多个代码块之一来执行
#+begin_src js
if(条件)
{
    当条件为true时执行的代码
}
else
{
    当条件不为true的时候执行的代码
}
#+end_src
#+begin_src js
if (time<20)
{
    x="Good Day";
}
else
{
    x="Good Evening";
}
#+end_src
**** switch
- switch 语句 - 使用该语句来选择多个代码块之一来执行
用于基于不同的条件来执行不同的动作
#+begin_src js
switch(n)
{
    case 1:
    执行代码块1
    break;
    case 2;
    执行代码块2
    break;
    default;
    n与case1与case2不同执行的代码
}
#+end_src
工作原理：首先设置表达式 n（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的嗲吗会被执行。使用 break 来阻止代码自动地向下一个 case 执行。
#+begin_src js
var day=new Date().getDay();
switch(day)
{
    case 0;
    x="Today it's Sunday";
    break;
    case1;
    x="Today it's Monday";
    break;
    case2:
    x="Today it's Tuesday";
    break
    case 3:
    x="Today it's Wednesday";
    break
    case 4:
    x="Today it's Thursday";
    break;
    case 5:
    x="Today it's Friday";
    break;
    case 6:
    x="Today it's Saturday";
    break;
#+end_src
*** JavaScript 循环控制
for - 循环代码块一定的次数
for/in - 循环遍历对象的属性
while - 当指定的条件为 true 时循环指定的代码块
do/while - 同样当指定的条件为 true 时循环指定的代码块
**** For 循环
#+begin_src js
for(语句1；语句2；语句3)
{
    被执行的代码
}
#+end_src
普通用法
#+begin_src js
for (var i=0; i<5; i++)
{
    x=x+"The number is"+i+"<br>";
}
#+end_src
多个变量
#+begin_src js
for (var i=0, len=cars.length; i<len; i++)
{
    document.write(car[i]+"<br>");
}
#+end_src
省略变量
#+begin_src js
var i=2, len=cars.length;
for (; i<len, i++)
{
    document.write(cars[i]+"<br>");
}
#+end_src

**** for/in 循环
#+begin_src js
var person={fname:"John",lname:"Doe",age:25};
for(x in person)
{
    var txt=``;
    txt=txt+person[x];
}
#+end_src

**** while 循环
while 循环会在指定条件为真时循环执行代码块。
#+begin_src js
while(条件)
{
    需要执行的代码
}
#+end_src
#+begin_src js
while(i<5)
{
    x=x+"The number is" + i + "<br>";
    i++;
}
#+end_src

**** do/while 循环
do/while 循环是 while 循环的变体。该循环会执行一次代码块，在检查条件是否为真之前，然后如果田间为真的话，就会重复这个循环。
#+begin_src js
do
{
    需要执行的代码
}
while（条件）；
#+end_src
#+begin_src js
do
{
    x=x+"The number is"+i+"<br>";
    i++;
}
while(i<5);
#+end_src
不先检查条件，而是先执行一次后才判断条件。
*** JavaScript 流程控制 break 和 continue 语句
Break 和 Continue 语句
break 语句用于跳出循环；
continue 用于跳过循环中的一个迭代。
#+begin_src js
for (i=0;i<10;i++)
{
    if (i==3)
    {
        break;
    }
    console.log(i)
}
#+end_src
#+begin_src js
for (i=0; i<10; i++)
{
    if(i==3) {continue;}
    console.log(i);
}
#+end_src
*** JavaScript 的异常处理
Throw、Try 和 Catch
- try 测试代码块的错误
- catch 处理错误
- throw 创建自定义错误
#+begin_src js
try{
    //在这里运行代码}
    cathc(err)
    {
        //在这里处理错误}
    }

#+end_src

#+begin_src js
    <button onclick="myFunc();">点击</button>
    <script>
    function myFunc(){
        try{
            alert(x);}
        catch(err){
            alert('发生错误，具体信息：'+err.message);
        }
    }
</script>
#+end_src

#+begin_src html
<!DOCTYPE html>
<html>
  <head>
    <script>
      var txt="";
      function message()
      {
      try
      {
      alert(x);
      }
      catch(err)
      {
      txt="There was an error on this page.\n\n";
      txt+="Error description:"+err.message+"\n\n";
      txt+="Click OK to continue.\n\n";
      alert(txt);
      }
      }
    </script>
  </head>
  <body>
    <input type="button" value="View message" onclick="message()">
    </body
</html>
#+end_src
**** Throw 语句
throw 语句允许我们创建自定义错误。
如果把 throw 与 try 和 catch 一起使用，就能够控制程序流，并生成自定义的错误消息。
语法：*throw exception* 抛出的异常可以是 JavaScript 字符串、数字、逻辑或对象。
实例：检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。
catch 会捕捉到这个错误，并显示一段自定义的错误消息。
#+begin_src html
<!doctype html>
<html class="no-js" lang="">
  <head>
    <meta charset="utf-8">
  </head>
  <body>
    <h1>throw功能测试</h1>
    <input id="demo" type ="text" />
    <p>请输入一个介于5到10之间的数字</p>
    <button onclick="myFunc();">测试</button>
    <p id="message" style="color:red;"></p>
    <script>
      var tag=document.getElementById("message");
      function myFunc(){
      try{
      var x=document.getElementById('demo').value;
      if (x=="")throw "输入的是空值";
      if (isNaN(x)) throw "输入的不是数字";
      if (x>10) throw "值大于10";
      if (x<5) throw "值小于5";
               tag.innerHTML=""  //用于在输入正确时去除原来出错的信息
               }catch(err){
               tag.innerHTML="输入错误，原因是："+err;
               }
               }
               </script>
  </body>
</html>
#+end_src
*** JavaScript 时间对象
在 JavaScript 中，Date 对象用来表示日期和时间。
#+begin_src js
var now=new Date();
now;
now.getFullYear();   //年份
now.getMonth();  //月份，注意月份范围是0-11，5表示6月
now.getDate(); //24,表示24号
now.getDay(); //3, 表示星期三
now.getHours(); //19, 24小时制
now.getMinutes(); //49, 分钟
now.getSeconds(); //22,秒
now.getMilliseconds; //875,毫秒
now.getTime();   //1435146562875, 以number形式表示时间戳
#+end_src
注意，当前时间是浏览器从本机操作系统获取的时间，所以不一定准确，因为用户可以把当前时间设定为任何值。
**** 创建一个指定日期和时间的 Date 对象，可以用：
#+begin_src js
var d=new Date(2017,5,19,20,15,30,123);
d; //Fri Jun 19 2017 20:15:30 GMT+0800(CST)
#+end_src
第二种创建一个指定日期和时间的方法是解析一个符合 ISO 8601 格式的字符串：
#+begin_src js
var d=Date.parse('2015-06-24T19:49:22.875+08:00');
d; //1435146562875
#+end_src
但它返回的不是 Date 对象，而是一个时间戳。不过有时间戳就可以很轻易的把它转化为一个 Date：
#+begin_src js
var d=new Date(1435146562875);
d; //Wed Jun 24 2015 19:49:22 GTM+0800(CST)
#+end_src
**** 操作日期
为日期对象设置一个特定的日期（2017 年 9 月 9 日）
#+begin_src js
var myDate=new Date()
myDate.setFullYear(2017,8,9)
#+end_src
注意：月份
将日期对象设置为 5 天后的日期：
#+begin_src js
var myDate=new Date()
myDate.setDate(myDate.getDate()+5)
#+end_src
注意：如果增加天数会改变月份或者年份，那么日期对象会自动完成这种转换。
**** 比较日期
日期对象也可用于比较两个日期。
下面的代码将当前日期与 2017 年 9 月 9 日做了比较：
#+begin_src js
var myDate=new Date();
myDate.setFullYear(2017,8,9);

var today=new Date();

if(myDate>today)
{
alert("Today is before");
}
else
{
}
** JavaScript 之 JSON 交换格式
*** JSON 介绍
1. JavaScript 对象表示法（JavaScript Object Notation)
2. JSON 是存储和交换文本信息的语法，类似 XML
3. JSON 比 XML 更小、更快，更易解析
4. JSON 是轻量级的文本数据交换格式
5. JSON 使用 JavaScript 语法来描述对象，但是 JSON 仍然独立于语言和平台。JSON 解析起和 JSON 库支持许多不同的编程语言。
6. JSON 更易理解
7. JSON 具有层级结构（值中存在值）
8. JSON 数据可使用 AJAX 进行传输
例如：
#+begin_src js
{
    "employees":[
        {"firstName":"Bill","lastName":"Gates"},
        {"firstName":"George","lastName":"Bush"},
        {"firstName":"Thomas","lastName":"Cater"}
    ]
}
#+end_src
*** JSON-转换为 JavaScript 对象
JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。
#+begin_src js
<html>
  <body>
    <h2>在Javascript中创建JSON对象</h2>
    <p>
      Name:<span id="jname"></span><br />
      Age:<span id="jage"></span><br />
      Address:<span id="jstreet"></span><br />
      Phone:<span id="jphone"></span><br />
    </p>
    <script type="text/javascript">
      var JSONObject={
      "name":"Bill Gates",
      "street":"Fifth Avenue New York 666",
      "age":56,
      "phone":"555 1234567"};
      document.getElementById("jname").innerHTML=JSONObject.name
      document.getElementById("jage").innerHTML=JSONObject.age
      document.getElementById("jsteet").innerHTML=JSONObject.street
      document.getElementById("jphone").innerHTML=JSONObject.phone
#+end_src
*存在形式其实是一个字符串*
*** JSON 语法是 JavaScript 语法的子集
1. 数据在名称/值对中
2. 数据由逗号分隔
3. 花括号保存对象
4. 方括号保存数组
"fisrtName":"John"
等价于这条 JavaScript 语句
firstName="John"
*** JSON 值
JSON 值可以是：
1. 数字（整数或浮点数）
2. 字符串（在双引号中）
3. 逻辑值（true 或 false）
4. 数组（在方括号中）
5. 对象（在花括号中）
6. Null
JSON 文件的类型是".json"
JSON 文本的 MIME 类型是"application/json" (发送 http 数据包时)
*** JSON.parse()
JSON 通常用于与服务端交换数据。在接收服务器数据时一般是字符串。可以使用 JSON.parse()方法讲数据转化为 JavaScript 对象。
语法：
=JSON.parse(text[,reviver])=
*parse: 解析，reviver：复活，再生
参数说明：
text：必须，一个有效的 JSON 字符串
reviver：可选，一个转换结果的函数，将为对象的每个成员调用此函数。
**** 举例
假设从服务器接受了以下数据：
='{"name":"jack","alexa":10000,"site":"www.baidu.com"}'=
使用 JSON.parse()方法处理以上数据，将其转换为 JavaScript 对象：
=var obj = JSON.parse('{"name":"jack","alexa":10000,"site":"www.baidu.com"}');=
注意：解析前要确保你的数据是标准的 JSOn 格式，否则会解析出错。
解析完成后，就可以在网页上使用 JSON 数据了：
#+begin_src js
<p id="demo"></p>
<script>
var obj = JSON.parse('{"name":"jack","alexa":10000,"site":"www.baidu.com"}');
document.getElementById("demo").innerHTML=obj.name+":"+obj.site;
</script>
#+end_src
*** JSON.stringify()
可以使用 JSON.stringify()方法将 JavaScript 对象转化为字符串。
语法：
=JSON.stringify(value[,replacer[,space]])=
参数说明：
value：
必须，JavaScript 对象。
replacer：
可选。用于转换结果的函数或数组。
如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值。使用返回值而不是原始值。如果此函数返回 undefined，则排除成员。根对象的键是一个空字符串：""。
space：
可选，文本添加缩进、空格和换行符，如果 space 是一个数字，则返回值文本在每个级别缩进指定数目的空格，如果 space 大于 10，则文本缩进 10 个空格。space 也可以使用非数字，如：\t
**** 例如向服务器发送以下数据：
=var obj={'name':'Jack','initDate':'2013-12-14','site':'www.google.com'};=
使用 JSON.stringify()方法处理以上数据，将其转化成字符串：
=var myJSON = JSON.stringify(obj);=
实例：
#+begin_src js
var obj ={'name':'Jack','initDate':'2013-12-14','site':'www.google.com'};
var myJSON=JSON.stringify(obj);
document.getElementById("demo").innerHTML=myJSON;
#+end_src
也可以将 JavaScript 数组转化为 JSON 字符串：
#+begin_src js
var arr=['Google','Baidu','Taobao','Facebook'];
var myJSON=JSON.stringify(arr);
#+end_src
实例:
#+begin_src js
var arr=['Google','Baidu','Taobao','Facebook'];
var myJSON=JSON.stringify(arr);
document.getElementById("demo").innerHTML=myJSON;
#+end_src
*** JSON 不能存储 Date 对象。
如果需要存储 Date 对象，需要将其转化为字符串。之后再将字符串转换为 Date 对象。
#+begin_src js
var text='{"name":"jack","initDate":"2013-12-14","Site":"www.baidu.com"}';
var obj=JSON.parse(text); //这里的initDate是一个字符串对象
obj.initDate=new Date(obj.initDate);
//obj['initDate']=new Date(obj['initDate']);转换为date对象
document.getElementById('demo').innerHTML=obj.name+
"创建日期："+obj.initDate;
#+end_src
也可以使用 JSON.parse 的第二个参数 reviver，一个转换结果为函数，对象的每个成员调用此函数。
#+begin_src js
var text='{"name":"jack","initDate":"2013-12-14","Site":"www.baidu.com"}';
var obj=JSON.parse(text,function(key,value){
    if(key=="initDate"){
    return newDate(value);
    }else{return value;
}});
document.getElementById("demo").innerHTML=obj.name+"创建日期:"+obj.initDate;
#+end_src
