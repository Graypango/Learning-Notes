#+TITLE: Pandas
* DataFrame 的结构
** pandas 读取的文件数据就是 DataFrame
** DataFrame 的创建
将数据写入文件
** DataFrame 的访问
- 列的访问
- 行的访问
** DataFrame 常用的功能、属性
- 数据查询
- 数据清洗
。。。
** 核心功能
**** 统计分析
**** 排序分析
**** 分组分析
**** 聚合分析
**** 关联分析
**** 交叉分析（透视表）
**** 相关分析
* 数据结构：Series
** 加载数据
1. 加载数据
   load_json()
   load_csv()
   load_sql()
   load_excel()
   ...
#+begin_src python :results output
import pandas as pd
df = pd.read_excel('/Users/pango/Projs/Data_Analysis/pandas/hospital.xlsx')

#观察变量类型
# <class 'pandas.core.frame.DataFrame'>

print(type(df))
#观察数据， 数据清洗

#写入
df.to_csv('朝阳[附件].csv')
#+end_src
** 写入数据
   to_xxx()
#+begin_src python
df.to_csv('朝阳[附件].csv', index = False)
#+end_src
** 核心数据结构：series
   加载数据返回 DataFrame 数据结构， DataFrame 由多个 series 组成
** 创建
     原因：从网上获取数据，需要写入表格， 需要 DataFrame
     a. 通过数组、列表、元组
     b. 通过字典
     c. 通过标量
#+begin_src python
df = pd.read_excel('/Users/pango/Projs/Data_Analysis/pandas/hospital.xlsx')

print(df.head())
print(type(df['社保卡号']))

#写入
#df.to_csv('朝阳[附件].csv')
#+end_src

series 结构
#+begin_src python :results output
import pandas as pd #series 的三种创建方式

# 创建序列对象
data = ['刘备', '关羽', '张飞', '马超', '黄忠'] #也可以是元组等

#自动生成index
s1 = pd.Series(data, index=['A','B','C','D','E'])
print(s1)

data = {'no1':'路飞', 'no2':'索隆', 'no3':'山治'}
s2 = pd.Series(data)
print(s2)

print('*'* 20)
myclass = 'python'
s3 = pd.Series(myclass, index=[x for x in range(1,21)])
print(s3)
#+end_src

#+RESULTS:
#+begin_example
A    刘备
B    关羽
C    张飞
D    马超
E    黄忠
dtype: object
no1    路飞
no2    索隆
no3    山治
dtype: object
,********************
1     python
2     python
3     python
4     python
5     python
6     python
7     python
8     python
9     python
10    python
11    python
12    python
13    python
14    python
15    python
16    python
17    python
18    python
19    python
20    python
dtype: object
#+end_example

** 访问
#+begin_src python :results output
import pandas as pd #series 的三种创建方式
import numpy as np

data = np.arange(20,40)
indies = [chr(x) for x in range(65, 85)]

s = pd.Series(data, index=indies)

#通过下表访问
print(s[0])
print(s[:5])
print(s[[0,4,7]])

#通过索引访问
print(s[['A','E','G']])
print(s['A':'F'])
#+end_src

#+RESULTS:
#+begin_example
20
A    20
B    21
C    22
D    23
E    24
dtype: int64
A    20
E    24
H    27
dtype: int64
A    20
E    24
G    26
dtype: int64
A    20
B    21
C    22
D    23
E    24
F    25
dtype: int64
#+end_example
** 日期处理： 日期序列
日期的形式可以多样
2020
2020-1
2021-1-1
2021-2-1 12:12:12
01 Jan 2021

功能：to_datetime(dates)
*** 作用一：可运算
#+begin_src python :results output
import pandas as pd
#创建日期序列
dates = pd.Series(['2021','2021-1','2021-2-2','2021-3-1 12:12:12', '01 Jun 2021'])
print(dates)

print('*' * 20)

dates = pd.to_datetime(dates)
print(dates) #精确到了最准的事件

#距离2021-1-1多少天
days = dates - pd.to_datetime('2021-1-1')
print(days)
#+end_src

#+RESULTS:
#+begin_example
0                 2021
1               2021-1
2             2021-2-2
3    2021-3-1 12:12:12
4          01 Jun 2021
dtype: object
,********************
0   2021-01-01 00:00:00
1   2021-01-01 00:00:00
2   2021-02-02 00:00:00
3   2021-03-01 12:12:12
4   2021-06-01 00:00:00
dtype: datetime64[ns]
0     0 days 00:00:00
1     0 days 00:00:00
2    32 days 00:00:00
3    59 days 12:12:12
4   151 days 00:00:00
dtype: timedelta64[ns]
#+end_example

*** 作用二：访问简洁：dt 接口
原因：运算、排序。。。

#+begin_src python :results output
import pandas as pd
#创建日期序列
dates = pd.Series(['2021','2021-1','2021-2-2','2021-3-1 12:12:12', '01 Jun 2021'])

dates = pd.to_datetime(dates)

#dt接口的使用， 日期序列提供了dt接口的使用
print(dates.dt.month)
print(dates.dt.year)
print(dates.dt.date)
print(dates.dt.month)
#+end_src

#+RESULTS:
#+begin_example
0    1
1    1
2    2
3    3
4    6
dtype: int64
0    2021
1    2021
2    2021
3    2021
4    2021
dtype: int64
0    2021-01-01
1    2021-01-01
2    2021-02-02
3    2021-03-01
4    2021-06-01
dtype: object
0    1
1    1
2    2
3    3
4    6
dtype: int64
#+end_example
*** 补充：日期操作
to_datetime()
date_range() 正常日期范围
bdate_range() 商业日期范围
#+begin_src python :results output
import pandas as pd

dates = pd.date_range('2021-1-1','2021-1-31')
print(dates)

dates = pd.bdate_range('2021-1-1','2021-1-31')
print(dates)
#+end_src

#+RESULTS:
: DatetimeIndex(['2021-01-01', '2021-01-02', '2021-01-03', '2021-01-04',
:                '2021-01-05', '2021-01-06', '2021-01-07', '2021-01-08',
:                '2021-01-09', '2021-01-10', '2021-01-11', '2021-01-12',
:                '2021-01-13', '2021-01-14', '2021-01-15', '2021-01-16',
:                '2021-01-17', '2021-01-18', '2021-01-19', '2021-01-20',
:                '2021-01-21', '2021-01-22', '2021-01-23', '2021-01-24',
:                '2021-01-25', '2021-01-26', '2021-01-27', '2021-01-28',
:                '2021-01-29', '2021-01-30', '2021-01-31'],
:               dtype='datetime64[ns]', freq='D')

* 核心数据结构 DataFrame
** DataFrame 特点：
1. 列可以是不同类型
2. 行、列可变
3. 标记轴（行、列）
4. 可以对行、列执行运算
** DataFrame 创建
1. 空的 DataFrame
2. 二维列表、元组、数组的创建（可以定义列名）
3. 通过列表-字典创建
4. 通过字典-列表创建: 数据的长度要一致
5. 通过字典-序列创建（推荐）

#+begin_src python :results output
import pandas as pd
import numpy as np

print('--------1. 空的DataFrame---------------------')
df1 = pd.DataFrame()
print(df1)

print('--------2. 通过二维数组-------------------------')
data =  np.random.randint(1,100,15).reshape(5,3) #列表，数组，元组转换成二维的然后生成
df2 = pd.DataFrame(data, index=['A','B','C','D','E'], columns = ['数学','英语','语文']) #生成列名和行标签
print(df2)
#df2.to_csv('成绩单.csv')


print('--------3.通过列表-字典创建----------------------')
# 字典的key作为列名使用
data = [
    {'A':110, 'B':120, 'C':119},
    {'A':911, 'B':1, 'C':2, 'D':18}
]
df3 = pd.DataFrame(data)
print(df3)

print('--------4.通过字典-列表/元组/数组创建-------------')
data = {
    'names' : ['White','Yello','Black','Red','Green'],
    'ages' : np.random.randint(18,25,5),
    'scores' : np.random.randint(60,100,5)
}
df4 = pd.DataFrame(data)
print(df4)

print('--------5.通过字典-序列创建----------------------')
goods = ['apple','orange','banana','peach']
prices = [10, 20, 11]
number = [20, 25.3, 13.5, 11.5]
data = {
    'goods': pd.Series(goods, index=['A','B','C','D']),
    'unit_price': pd.Series(prices, index=['B','C','D']),
    'quantity': pd.Series(number, ['A','B','C','D'])
}
df5 = pd.DataFrame(data)
print(df5)
#+end_src

#+RESULTS:
#+begin_example
--------1. 空的DataFrame---------------------
Empty DataFrame
Columns: []
Index: []
--------2. 通过二维数组-------------------------
   数学  英语  语文
A  16  25  16
B  44  85  87
C  49  83  66
D  61  46  31
E  75  81  11
--------3.通过列表-字典创建----------------------
     A    B    C     D
0  110  120  119   NaN
1  911    1    2  18.0
--------4.通过字典-列表/元组/数组创建-------------
   names  ages  scores
0  White    24      86
1  Yello    20      78
2  Black    20      93
3    Red    18      83
4  Green    22      65
--------5.通过字典-序列创建----------------------
    goods  unit_price  quantity
A   apple         NaN      20.0
B  orange        10.0      25.3
C  banana        20.0      13.5
D   peach        11.0      11.5
#+end_example

** DataFrame 操作
*** 列的操作
**** 列的访问：
- 列名访问 [列名] | /[[列名 1，列名 2...]】
**** 列的添加
append()
**** 列的删除
drop()
**** 列的修改
#+begin_src python :results output
import numpy as np
import pandas as pd

data = {
    'title': pd.Series(['computer','fridget','washer','airconditioner','tv']),
    'price': pd.Series([5000,3000,4500,5500,2500]),
    'number': pd.Series([2,5,8,3])
}

df = pd.DataFrame(data)
'''
index：索引
'''
df.index = pd.date_range('2021-2-1', '2021-2-5')
print(pd)
#发现存在缺失值，使用fillna填充为0
df.fillna(0, inplace = True) #空值填充, inplace代表是否替换原来的DataFrame
print('-------------1.访问--------------')
print(df['title'])
print(df[['title','number']])

print('-------------2.列的添加-----------')
money = df['price'] * df['number']
print(money)
df['金额'] = money
print(df)

print('-------------3.列的修改-----------')
numbers = np.random.randint(2,10,5)
df['number'] = numbers #通过列名修改数据（和字典类似）
df['金额'] =df['price'] * df['number']
print(df)

print('-------------4.列的删除-----------')
#通过pop, drop和del进行删除
del df['price']
print(df)

df.pop('number')
print(df)

df.drop(columns=['金额'], inplace = True) #同上面的dropna
print(df)
#+end_src

#+RESULTS:
#+begin_example
<module 'pandas' from '/Users/pango/miniforge3/lib/python3.9/site-packages/pandas/__init__.py'>
-------------1.访问--------------
2021-02-01          computer
2021-02-02           fridget
2021-02-03            washer
2021-02-04    airconditioner
2021-02-05                tv
Freq: D, Name: title, dtype: object
                     title  number
2021-02-01        computer     2.0
2021-02-02         fridget     5.0
2021-02-03          washer     8.0
2021-02-04  airconditioner     3.0
2021-02-05              tv     0.0
-------------2.列的添加-----------
2021-02-01    10000.0
2021-02-02    15000.0
2021-02-03    36000.0
2021-02-04    16500.0
2021-02-05        0.0
Freq: D, dtype: float64
                     title  price  number       金额
2021-02-01        computer   5000     2.0  10000.0
2021-02-02         fridget   3000     5.0  15000.0
2021-02-03          washer   4500     8.0  36000.0
2021-02-04  airconditioner   5500     3.0  16500.0
2021-02-05              tv   2500     0.0      0.0
-------------3.列的修改-----------
                     title  price  number     金额
2021-02-01        computer   5000       3  15000
2021-02-02         fridget   3000       4  12000
2021-02-03          washer   4500       2   9000
2021-02-04  airconditioner   5500       3  16500
2021-02-05              tv   2500       5  12500
-------------4.列的删除-----------
                     title  number     金额
2021-02-01        computer       3  15000
2021-02-02         fridget       4  12000
2021-02-03          washer       2   9000
2021-02-04  airconditioner       3  16500
2021-02-05              tv       5  12500
                     title     金额
2021-02-01        computer  15000
2021-02-02         fridget  12000
2021-02-03          washer   9000
2021-02-04  airconditioner  16500
2021-02-05              tv  12500
                     title
2021-02-01        computer
2021-02-02         fridget
2021-02-03          washer
2021-02-04  airconditioner
2021-02-05              tv
#+end_example

*** 行的操作
**** 行的访问
a. 下标切片 （不能通过下标获取，只能通过切片访问）
b. 通过 iloc 获取[行的下标/切片，列的下标/切片]
c. loc 获取 [行的索引名称， 列的名字]
**** 行的添加
a. append
**** 行的删除
a. drop， 掩码
**** 行的修改
索引后修改
#+begin_src python :results output
import pandas as pd
import numpy as np

data = {
    'name': ['刘备','关羽','张飞','赵云','黄忠'],
    'age': [60,55,50,30,70],
    'height': [172.5, 178.5, 175,180,173]}

df =  pd.DataFrame(data)
print(df)
print('------------------1.访问---------------')
print('第一个人的数据:')
#print(df[0]) 找0这一行的数据
print(df[:1])
print('前三个人的姓名、年龄：')
#方案1
print(df[:3][['name','age']])
#方案2
print(df.iloc[:3,:2])
print(df.iloc[0,0])
print(df.iloc[[0,3],0])

#通过loc寻找名称来索引，注意C是包含进去的
df.index = [chr(x) for x in range(65,70)]
print(df)
print(df.loc[['C', 'D'],['name','height']]) #通过名称取访问
print(df.loc['A':'C',['name','height']])
print(df.loc['A':'C',['name','age']])

print('------------------2.添加---------------')
data2 = {
    'name' : ['曹操', '曹植', '曹仁'],
    'age' : [55, 35, 53],
    'height' : [175, 165, 180]
}
df2 = pd.DataFrame(data2)
df = df.append(df2, ignore_index=True) #覆盖原来的df, 忽略索引
print(df)

print('-----------------3.删除----------------')
df.drop(index = [5,6,7], inplace = True)
print('删除身高在155以下的数据')

df.drop(index = df[df['height']<155].index, inplace = True)   #掩码
print(df)
print('删除100岁以上的老年人')
df.drop(index = df[df['age']>100].index, inplace = True)
print(df)

print('-----------------4.修改----------------')
#找到数据后修改
df.iloc[0,2] = 170
print(df)
df.loc[1:5,'height'] = 180
print(df)
#+end_src

#+RESULTS:
#+begin_example
  name  age  height
0   刘备   60   172.5
1   关羽   55   178.5
2   张飞   50   175.0
3   赵云   30   180.0
4   黄忠   70   173.0
------------------1.访问---------------
第一个人的数据:
  name  age  height
0   刘备   60   172.5
前三个人的姓名、年龄：
  name  age
0   刘备   60
1   关羽   55
2   张飞   50
  name  age
0   刘备   60
1   关羽   55
2   张飞   50
刘备
0    刘备
3    赵云
Name: name, dtype: object
  name  age  height
A   刘备   60   172.5
B   关羽   55   178.5
C   张飞   50   175.0
D   赵云   30   180.0
E   黄忠   70   173.0
  name  height
C   张飞   175.0
D   赵云   180.0
  name  height
A   刘备   172.5
B   关羽   178.5
C   张飞   175.0
  name  age
A   刘备   60
B   关羽   55
C   张飞   50
------------------2.添加---------------
  name  age  height
0   刘备   60   172.5
1   关羽   55   178.5
2   张飞   50   175.0
3   赵云   30   180.0
4   黄忠   70   173.0
5   曹操   55   175.0
6   曹植   35   165.0
7   曹仁   53   180.0
-----------------3.删除----------------
删除身高在155以下的数据
  name  age  height
0   刘备   60   172.5
1   关羽   55   178.5
2   张飞   50   175.0
3   赵云   30   180.0
4   黄忠   70   173.0
删除100岁以上的老年人
  name  age  height
0   刘备   60   172.5
1   关羽   55   178.5
2   张飞   50   175.0
3   赵云   30   180.0
4   黄忠   70   173.0
-----------------4.修改----------------
  name  age  height
0   刘备   60   170.0
1   关羽   55   178.5
2   张飞   50   175.0
3   赵云   30   180.0
4   黄忠   70   173.0
  name  age  height
0   刘备   60   170.0
1   关羽   55   180.0
2   张飞   50   180.0
3   赵云   30   180.0
4   黄忠   70   180.0
#+end_example

** DataFrame 属性和功能
*** 数据清洗：
**** 空值/缺失值处理
- dropna() 删除整一行数据
- fillna() 填充值
**** 掩码
=df[df['height']<175]=
**** drop_duplicates() 删除重复值
***** 例如：朝阳数据：同一个人同一天消费算作一次消费
2021-1-31 小白 xxx1
2021-1-31 小白 xxx2
算作一条
=drop_duplicates(setsub=['date',name'])=
***** 默认情况下删除整行
**** apply()
apply(处理函数), 处理函数：可以用匿名函数表达
匿名函数： lambda 参数: 返回值
语法： 列数据.apply(lambda a: a+1)
    a:代表该列数据
    返回新的一列: a+1

**** 类型转换
astype() 修改类型
**** 列名重命名
rename
**** 举例
#+begin_src python :results output
import pandas as pd
df = pd.read_excel('/Users/pango/Projs/Data_Analysis/pandas/hospital.xlsx')

#观察数据
print(df.shape)

#数据清洗
df.dropna(inplace = True)
print(df.shape)

df.drop_duplicates(subset = ['社保卡号','购药时间'], inplace = True)
print(df.shape)

#print(df['购药时间'])
#pd.to_datetime(df['购药时间'])
df['购药时间'] = df['购药时间'].apply(lambda x: x.split(' ')[0])
print(df['购药时间'])
df['购药时间'] = pd.to_datetime(df['购药时间'], errors='coerce')
print(df['购药时间'])
#pd.to_datetime(df['购药时间'])

#+end_src

#+RESULTS:
#+begin_example
(6578, 7)
(6575, 7)
(5396, 7)
0       2018-01-01
1       2018-01-02
2       2018-01-06
3       2018-01-11
4       2018-01-15
           ...
6572    2018-04-27
6573    2018-04-27
6575    2018-04-27
6576    2018-04-27
6577    2018-04-28
Name: 购药时间, Length: 5396, dtype: object
0      2018-01-01
1      2018-01-02
2      2018-01-06
3      2018-01-11
4      2018-01-15
          ...
6572   2018-04-27
6573   2018-04-27
6575   2018-04-27
6576   2018-04-27
6577   2018-04-28
Name: 购药时间, Length: 5396, dtype: datetime64[ns]
#+end_example
*** 常用属性，功能
- info() 查看相关信息（列名、数量、类型...）
- index 查看索引
- columns 查看列名
- dtypes 查看数据类型
- describe() 异常值统计查询， 可以观察异常数据
- head() 查看前几条数据，默认 5 条，可以填入相应数字
- tail() 查看后几条数据
#+begin_src python :results output
import pandas as pd

data = {
    'title' : ['apple','banana','orange'],
    'price' : ['-1.5', '3.2', '4.1'],
    'number': [4, 2, 6]
}
df = pd.DataFrame(data)
print('-----------------------')
print(df.index)
print(df.shape)
print(df.columns)
print(df.dtypes)
print(df.info())
print('-----------------------')
df.rename(columns = {
    'title':'商品名',
    'price':'单价',
    'number':'数量'},
    inplace = True
)
print(df.columns)

df['单价'] = df['单价'].astype(float)
print(df.dtypes)

print(df.describe()) #观察异常数据

df[df['单价']>=0] #掩码
print(df.describe())

df['金额'] = df['单价'] * df['数量']
print(df)
#+end_src

#+RESULTS:
#+begin_example
-----------------------
RangeIndex(start=0, stop=3, step=1)
(3, 3)
Index(['title', 'price', 'number'], dtype='object')
title     object
price     object
number     int64
dtype: object
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 3 entries, 0 to 2
Data columns (total 3 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   title   3 non-null      object
 1   price   3 non-null      object
 2   number  3 non-null      int64
dtypes: int64(1), object(2)
memory usage: 200.0+ bytes
None
-----------------------
Index(['商品名', '单价', '数量'], dtype='object')
商品名     object
单价     float64
数量       int64
dtype: object
             单价   数量
count  3.000000  3.0
mean   1.933333  4.0
std    3.007214  2.0
min   -1.500000  2.0
25%    0.850000  3.0
50%    3.200000  4.0
75%    3.650000  5.0
max    4.100000  6.0
             单价   数量
count  3.000000  3.0
mean   1.933333  4.0
std    3.007214  2.0
min   -1.500000  2.0
25%    0.850000  3.0
50%    3.200000  4.0
75%    3.650000  5.0
max    4.100000  6.0
      商品名   单价  数量    金额
0   apple -1.5   4  -6.0
1  banana  3.2   2   6.4
2  orange  4.1   6  24.6
#+end_example


*** 建模：完成 KPI
*** 可视化
*** 总结
* 用 Pandas 做数据分析
** 统计分析
count()/sum()/mean()/min()/std()/max()....
** 数据排序
- 按值排序 sort_values()
- 按索引名称 sort_index()
** 分组分析
- groupby()
** 分组聚合分析
- groupby()
- agg()
** 关联操作
- merge()
** 透视分析(交叉分析)
- pivot_table()
** 相关分析
- corr()
** 案例 1 统计分析
#+begin_src python :results output
import pandas as pd
df = pd.read_excel('/Users/pango/Projs/Data_Analysis/pandas/hospital.xlsx')
print('统计分析')
# 非空统计
print('查看是否有缺失值')
print(df.count()) #数量统计
#求和
print(df['实收金额'].sum())
#平均值
print(df['实收金额'].mean())
#统计函数describe()直接查看
print(df.describe())
#+end_src

#+RESULTS:
#+begin_example
查看是否有缺失值
购药时间    6576
社保卡号    6576
商品编码    6577
商品名称    6577
销售数量    6577
应收金额    6577
实收金额    6577
dtype: int64
304630.26
46.31750950281283
               社保卡号          商品编码         销售数量         应收金额         实收金额
count  6.576000e+03  6.577000e+03  6577.000000  6577.000000  6577.000000
mean   6.091254e+09  1.015869e+06     2.386194    50.473803    46.317510
std    4.889284e+09  5.131153e+05     2.375202    87.595925    80.976702
min    1.616528e+06  2.367010e+05   -10.000000  -374.000000  -374.000000
25%    1.014234e+08  8.614560e+05     1.000000    14.000000    12.320000
50%    1.001650e+10  8.615070e+05     2.000000    28.000000    26.600000
75%    1.004882e+10  8.690690e+05     2.000000    59.600000    53.000000
max    1.283612e+10  2.367012e+06    50.000000  2950.000000  2650.000000
#+end_example
** 案例 2 排序分析
#+begin_src python :results output
import pandas as pd
import numpy as np
print('排序分析')
data = {
    'A' : np.random.randint(25,30,5),
    'B' : np.random.randint(18,24,5),
    'C' : np.random.randint(100,110,5)
}
df = pd.DataFrame(data, index=['a','f','d','c','e'])
print(df)

print('---------------索引排序--------------------')
df.sort_index(inplace = True)
print(df)

print('---------------值排序--------------------')
df. sort_values(by=['A'], inplace = True)
print(df)
df. sort_values(by=['A'], inplace = True, ascending = False)
print(df)

print('-------------多值排序---------------------')
df.sort_values(by=['A','C'], inplace = True, ascending = [True, False])
#+end_src

#+RESULTS:
#+begin_example
排序分析
    A   B    C
a  27  18  109
f  26  23  108
d  26  22  100
c  28  19  109
e  25  21  108
---------------索引排序--------------------
    A   B    C
a  27  18  109
c  28  19  109
d  26  22  100
e  25  21  108
f  26  23  108
---------------值排序--------------------
    A   B    C
e  25  21  108
d  26  22  100
f  26  23  108
a  27  18  109
c  28  19  109
    A   B    C
c  28  19  109
a  27  18  109
d  26  22  100
f  26  23  108
e  25  21  108
-------------多值排序---------------------
#+end_example

** 案例 3 分组分析
#+begin_src python :results output
import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_excel('/Users/pango/Projs/Data_Analysis/pandas/hospital.xlsx')
plt.rcParams['font.sans-serif'] = ['Kai']

'''
统计销量比较好的前十个药品, 并绘图
1. 按照药品名进行分组
'''
print(df.columns)
df_gb = df.groupby(by='商品名称')
#print(df_gb)
res = df_gb [['销售数量']].sum() # 重点！！！没有[]拿到的是series，没有sort_values的功能， 通过两个[]或者切片拿到的是DataFrame
print(res)
res.sort_values(by=['销售数量'], inplace = True, ascending = False)
print(res)
top_ten = res[:10]
print(top_ten)  #或者通过head(10)

# 画图
plt.figure('药品分析图')
plt.title('朝阳医院前十药品分析图')
plt.xlabel('药名')
plt.ylabel('销量')
plt.xticks(rotation = 90) # 新知识点, 字体调转方向
plt.bar(top_ten.index, top_ten['销售数量'])
plt.show()
#+end_src

#+RESULTS:
#+begin_example
Index(['购药时间', '社保卡号', '商品编码', '商品名称', '销售数量', '应收金额', '实收金额'], dtype='object')
                  销售数量
商品名称
,**盐酸阿罗洛尔片(阿尔马尔)  101.0
,**阿替洛尔片           17.0
D厄贝沙坦氢氯噻嗪片(倍悦)     2.0
D替格瑞洛片            10.0
D盐酸贝尼地平片          33.0
...                ...
非洛地平缓释片(康宝得维)     99.0
非洛地平缓释片(波依定)     375.0
马来酸依那普利片(怡那林)     28.0
马来酸左旋氨氯地平片(玄宁)    43.0
高特灵              384.0

[78 rows x 1 columns]
                   销售数量
商品名称
苯磺酸氨氯地平片(安内真)    1785.0
开博通              1458.0
酒石酸美托洛尔片(倍他乐克)   1138.0
硝苯地平片(心痛定)        825.0
苯磺酸氨氯地平片(络活喜)     796.0
...                 ...
培哚普利片(雅施达)         10.0
赖诺普利片(信赖安)          5.0
D厄贝沙坦氢氯噻嗪片(倍悦)      2.0
TG盐酸贝那普利片(新亚富舒)     2.0
TG厄贝沙坦片             2.0

[78 rows x 1 columns]
                     销售数量
商品名称
苯磺酸氨氯地平片(安内真)      1785.0
开博通                1458.0
酒石酸美托洛尔片(倍他乐克)     1138.0
硝苯地平片(心痛定)          825.0
苯磺酸氨氯地平片(络活喜)       796.0
复方利血平片(复方降压片)       517.0
G琥珀酸美托洛尔缓释片(倍他乐克)   509.0
缬沙坦胶囊(代文)           444.0
高特灵                 384.0
非洛地平缓释片(波依定)        375.0
#+end_example
** 案例 4 分组分析
#+begin_src python :results output
import pandas as pd
import numpy as np

df = pd.DataFrame(
    {
        'team' : np.random.randint(1,4,10),
        'values' : np.random.randint(100,200,10),
        'year' : np.random.randint(2018, 2022,10)
    }
)

df_gb = df.groupby('year')
# 通过循环查看每一组数据: 类似于zip压缩
for y, v in df_gb:
    print(y)
    print(v)

print('------------------------------------------')
# 通过get_group()拿到指定组的数据
v_2021 = df_gb.get_group(2021)
print(v_2021)

print('------------------------------------------')
#分组聚合： groupby()[].agg([])
res = df_gb['values'].agg(['sum','mean','max','min'])
print(res)
#+end_src

#+RESULTS:
#+begin_example
2018
   team  values  year
1     3     165  2018
2019
   team  values  year
2     3     178  2019
4     1     110  2019
2020
   team  values  year
0     1     198  2020
3     3     194  2020
5     3     185  2020
6     2     152  2020
8     1     158  2020
9     3     127  2020
2021
   team  values  year
7     3     142  2021
------------------------------------------
   team  values  year
7     3     142  2021
------------------------------------------
       sum  mean  max  min
year
2018   165   165  165  165
2019   288   144  178  110
2020  1014   169  198  127
2021   142   142  142  142
#+end_example
