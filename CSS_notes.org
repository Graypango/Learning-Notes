#+TITLE: CSS Basic
* CSS Basic_Knowledge
** CSS 简介
*** CSS: 层叠样式表（Cascading Style Sheets)
1. 样式定义如何显示 HTML 元素
2. 样式可以解决内容与表现分离的问题
3. 外部样式表可以极大提高工作效率
4. 外部样式通常储存在 CSS 文件中
5. 多个样式定义可层叠为一
所有主流的浏览器均支持层叠样式表，样式表允许以多种方式规定样式信息，可以规定在单个的 HTML 元素中，在 HTML 页的头元素中，或在一个 CSS 文件中，甚至可以在同一个 HTML 文件内部饮用多个外部样式表。
*** 层叠次序：
当同一个 HTMl 元素被不止一个样式定义时，会使用哪个样式呢？
一般而言，所有的样式会根据下面的规则层叠于一个新的虚拟样式中，其中数字 4 拥有最高的优先权。
1. 浏览器缺省设置
2. 外部样式表:同等级的样式表也是从上往下层层覆盖
3. 内部样式表（位于<head>标签内部）
4. 内联样式（在 HTML 元素内部）
内联样式
#+begin_src html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Title</title>
    <link href="CSS_basic.css" type="text/css" rel="stylesheet" /> <!-- 3 -->
    <style>
     p {
       color:blue; <!-- 2 -->
     }
    </style>
  </head>
  <body>
    <p style="color:red">this is a test!</p>  <!-- 1 -->
  </body>
</html>
#+end_src
可以用 Chrome 来进行检查，会自动切换到对应的标签。
/*！important*/可以提高优先级最高
*** CSS 语法
CSS 规则由两个主要的部分构成：选择器，以及一条或多条命令。
selector {declaration1;declaration2;...declarationN }
选择器是需要改变样式的 HTML 元素。
每条声明由一个属性和一个值组成。
属性（property)是希望设置的样式属性（stype attibute)。每个属性有一个值，属性和值用冒号分开。
selector {property:value}

下面的代码是将 h1 元素内文字定义为红色，同时将字体大小设置为 14 像素。
其中 h1 是选择器，color 和 font-size 是属性，red 和 14px 是值。
提示：使用{}来包围声明
=h1 {color:red; font-size: 14px;}=
*** 属性的值的不同写法和单位
除了英文单词 red，还可以使用十六进制的颜色值 #ff0000;
=p {color:#ff0000;}=
为了节约字节，可以使用 CSS 的缩写形式：
=p {color:#f00;}=
还可以通过两种方法使用 RGB 值：
=p {color:rgb(255,0,0);}=
=p {color:rgb(100%,0%,0%);}=
注意：当使用 RGB 百分比时，即使当值为 0 时也要写百分比符号。但是在其他的情况下就不需要这么做了。
比如说，当尺寸为 0 像素时，0之后就不需要使用 px 单位。
*** 空格和大小写
CSS 对于大小写和空行不敏感，多余的空格和空行也没有任何影响，但请养成规范编码的好习惯！
*** 多重声明：
如果要定义不止一个声明，则需要用分号将每个声明分开。建议在每行只描述一个属性，这样可以增强样式定义的可读性。
#+begin_src html
p {
    text-align:center;
    color: black;
    font-family:aria;
}
#+end_src
*** 注释语法
/* */
*** 如何插入样式表
1. 外部样式表 当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，可通过改变一个文件来改变整个站点的外观。每个页面使用<link>标签链接到样式表。<link>标签在（文档的）头部：
   #+begin_src html
   <head>
   <link rel="stylesheet" type="text/css" href="mystyle.css" />
   </head>
   #+end_src
   浏览器会从文件 mystyle.css 文件中读到样式声明，并根据它来格式文档。
   外部样式表可以在任何文本编辑器中进行编辑。文件不能包含任何的 HTML 标签。样式表应该以.css 扩展名进行保存。下面是一个样式表的例子：
   #+begin_src css
   hr {color:sienna;}
   p {margin-left:20px;}
   body {backgroud-image:url("images/back40.gif");}
   #+end_src
   外部样式表不需要包含在<style>标签里。
   不要在属性值与单位之间留空格。“margin-left：20 px”与“margin-left：20px”是有区别的！
   一个 HTML 文件可以导入多个外部样式表。
2. 内部样式表
   当单个文档需要特殊的饿样式时，就应该使用内部样式表。使用<style>标签在文档头部定义内部样式表，就像这样
   #+begin_src html
   <head>
   <style type="text/css">
    hr {color:sienna;}
    p {margin-left:20px;}
    body {background-image:url("images/back40.gif");}
   </style>
   </head>
  #+end_src
3. 内联样式
   要使用内联样式，只需要在标签内使用（style）属性。Style 属性可以包含任何 CSS 属性。下面展示如何改变段落的颜色和左外边框：
   #+begin_src html
   <p style="color:sienna; margin-left:20px">
   This is a paragraph
   </p>
   #+end_src
   尽量不要使用内联样式！保持内容和样式的分离解耦！
4. 样式的覆盖与继承
   如果某些属性在不同的样式中被同样的选择器定义，那么属性值将从更具体的样式中被继承过来。
   例如，外部样式表拥有对 h3 选择器的三个属性：
   #+begin_src css
   h3 {
   color:red;
   text-align:left;
   font-size:8ft;
   }
   #+end_src
   而内部样式表拥有针对 h3 选择器的两个属性：
   #+begin_src css
   h3 {
   text-align:right;
   font-size:20pt;
   }
   #+end_src
   假如拥有内部样式表的这个页面同时与外部样式表链接，那么 h3 得到的样式是：
   #+begin_src css
   color:red;
   text-align:right;
   font-size:20pt;
   #+end_src
   即颜色属性将被继承于外部样式表，而文字排列（text-alignment）和字体尺寸（font-size）
   会被内部样式表中的规则取代。
** CSS 选择器
*** 元素选择器：标签
最常见的 CSS 选择器是元素选择器，又成为类型选择器（type selector）。文档的元素就是最基本的选择器，也就是根据标签类型来选择。
#+begin_src css
html {color:black;}
h1 {color:blue;}
h2 {color:silver;}
#+end_src
*** 分组选择器：逗号
将多种选择器用逗号分隔，同时进行 CSS 设置，则称为分组选择器。
#+begin_src css
h2,p {color:gray;}
body,h2,p,table,th,td,pre,strong,em {color:gray;}
#+end_src
*** 通配符选择器：*
通配选择器（universal selector):一个（*）。该选择器可以与任何元素匹配，就像是一个通配符。例如下面的规则可以使整个文档中每个元素都为红色：
=* {color:red;}=
*** 类选择器：圆点.  (类型)
使用标签所设置的 class 类属性来选择元素。只有适当的标记文档后，才能使用这些选择器。
为了将类选择器的样式与元素关联，必须将 class 指定为一个适当的值。
例如在 CSS 文件中,类选择器通过圆点来实现
=.important{color:red}=
为了在 HTML 里面调用
#+begin_src html
<h1 class="important">
This heading is important.
</h1>

<p class="important">
This paragraph is important.
</p>
#+end_src
*** ID 选择器:#
可以为每个标签设置一个在整个文档内独一无二的 ID，然后利用这个 ID 选择这个标签
=<p id="intro">This is a paragraph of introduction.</p>=
id 选择器的语法是：#
#intro {font-weight:bold;}
*区分大小写*
请注意，类选择器和 ID 选择器可能是大小写区分的。这取决于文档的语言。HTML 和 XHTML 将类和 ID 值定义为区分大小写，所以类和 ID 值的大小写必须与文档中的相应值匹配。
因此，对于以下的 CSS 和 HTML，元素不会变成粗体：
#+begin_src css
#intro {font-weight:bold;}

<p id="Intro">This is a paragraph of introduction.</p>
#+end_src
*** 属性选择器：[]
属性选择器可以根据元素的属性及属性值来选择元素。
*简单属性选择器*
如果希望选择有某个属性的元素，而不论属性值是什么，可以使用简单属性选择器。
=[title]{color:red;}=
还可以只对有 href 属性的 a 标签应用样式：
=a[href]{color:red;}=
还可以根据多个属性进行选择，只需将属性选择器链接在一起即可。
例如，为了同时有 href 和 title 属性的 HTML 超链接的文本设置为红色，可以这样写：
=a[href][title]{color:red;}=
*根据具体属性值选择*
除了选择拥有某些属性的元素，还可以进一步缩小选择范围，只选择有特定属性值的元素。
例如，假如希望将指向 web 服务器上某个指定文档的超链接变成红色，可以这样写：
=a[href="http://www.baidu.com/about_us.asp"]{color:red;}=
与简单属性选择器类似，可以把多个属性-值选择器链接在一起来选择一个文档：
=a[href="http://www.baidu.com/"][title="baidu"]{color:red;}=
属性与属性值必须完全匹配，
请注意，上面的格式要求必须与属性只完全匹配。如果属性值包含用空格分隔的值列表，匹配就可能出现问题。
=<p class="important warning">This paragraph is a very important warning.</p>
=p[class="important warning"]{color:red;} 注意中间的空格
*** 更多属性的匹配方法
| 选择器（全部要带中括号） | 描述                                                     |
|--------------------------+----------------------------------------------------------|
| attibute                 | 用于选择带有指定属性的元素。                             |
| attibute=value           | 用于选取带有指定属性和值的元素                           |
| attibutre～=value        | 用于选取属性只中包含词汇的元素                           |
| attribute｜=value        | 用于选取带有以指定开头的属性值的元素，该值必须是整个单词 |
| attribute^=value         | 匹配属性值以指定开头的每个元素                           |
| attribute$=value         | 匹配属性值以指定值的结尾的每个元素                       |
| attribute*=value         |匹配属性值中包含指定值的每个元素                                          |
*** 后代选择器：空格
利用祖先与后代关系，逐渐缩小查找范围的上下文选择器。
例如对 h1 元素中的 em 元素应用样式，可以这样写：
=h1 em{color:red;}=
上面这个规则会把作为 h1 元素后代的 em 元素的文本变为红色。其他 em 文本（如段落或块引用中的 em）则不会被这个规则选中：
#+begin_src html
<h1>This is a<em>important</em>heading</h1>
<p>This is a<em>important</em>paragraph.</p>
#+end_src
后代选择器有一个容易被忽视的地方，即两个元素之间的层次间隔可以是无限的。也就是祖先与后代不用是父子这种直接后代关系，可以跨越多个层级。
例如，如果写作 ul em，这个语法就会从 ul 元素继承的所有 em 元素，而不论 em 的嵌套层次多深。
#+begin_src html
<ul>
  <li>list item 1
    <ol>
      <li>list item1-1</li>
      <li>list item1-2</li>
      <li>list item1-3</li>
        <ol>
          <li>list item 1-3-1</li>
          <li>list item<em>1-3-2</em></li> <!-- em -->
          <li>list item 1-3-3</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>list item 2</li>
  <li>list item 3</li>
 </ul>
#+end_src
*** 子元素选择器：>
如果不希望选择/任意/的后代元素，而是希望缩小范围，只选择某个元素的子元素，也就是*直接*的父子关系，可以使用子元素，可以使用子元素选择器（child selector）
例如，如果希望只选择 h1 元素子元素的 strong 元素，可以这样写：
=h1>strong{color:red;}=
这个规则会把第一个 h1 下面的两个 strong 元素变为红色(/直接子元素/)，但是第二个 h1 中的 strong 不受影响：
#+begin_src html
<h1>This is<strong>very</strong><strong>very</strong>important.</h1>
<h1>This is<em>really<strong>very</strong></em>important.</
#+end_src
结合后代选择器和子选择器，请看下面这个选择器：
=table.company td > p=
选择作为 td 元素子元素的所有 p 元素，这个 td 元素本身从 table 元素继承，该 table 元素有一个包含 company 的 class 属性
*** 相邻兄弟选择器： +
相邻兄弟选择器（adjacent sibling selector)选择紧跟在元素后的*同级*元素，二者有相同父元素
例如，如果要增加紧接在 h1 元素后出现的段落上的边距，可以这样写：
=h1+p{margin-top:50px}=
这个选择器读作：“选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素。”
在下面的片段中，div 元素中包含两个列表：一个无序列表，一个有序列表，每个列表都包含三个列表项。这两个列表是相邻兄弟，列表项本身也是相邻兄弟。不过，第一个列表中的列表项与第二个列表中的列表项不是相邻兄弟，因为这两组列表项不属于同一个父元素（最多只能算堂兄弟）。
#+begin_src html
<div>
  <ul>
    <li>list item 1</li>
    <li>list item 2</li>
    <li>list item 3</li>
  </ul>
  <ol>
    <li>list item 1</li>
    <li>list item 2</li>
    <li>list item 3</li>
  </ol>
</div>
#+end_src
=li+li{font-weight:bold;}
上面这个选择器只会把列表中的第二个和第三个列表项变为粗体（无序列表和有序列表都一样），第一个列表项不会收到影响。
*** 伪类：冒号：
有一些标签具有不同的状态，被成为伪类。例如超级链接 a 标签！链接的不同状态都可以不同的方式显示，这些状态包括：活动状态，已被访问状态，未被访问状态，和鼠标悬停状态。
#+begin_src css
a:link{color:#FF0000}  /*未被访问的链接*/
a:visit{color:#00FF00FF} /*已访问的链接*/
a:hover{color:#FF00FF}  /*鼠标移动到链接上*/
a:active{color:#0000FF} /*选定的链接*/
#+end_src
通过伪类选择器可以对 a 标签的不同状态设置不同的 css 样式。
提示：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。
提示：在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。
提示：伪类米哦那过程对待虾蟹不敏感。
伪类可以与 CSS 类配合使用。
#+begin_src css
a.red:visited{color:#FF0000}
<a class="red" href="css_syntax.asp">CSS Syntax</a>
#+end_src
**** 更多的伪类：
| 属性         | 描述                                   | CSS |
|--------------+----------------------------------------+-----|
| :active      | 向被激活的元素添加样式。               |   1 |
| :focus       | 向拥有键盘输入焦点的元素添加样式       |   2 |
| :hover       | 当鼠标悬浮在元素上方时，向元素添加样式 |   1 |
| :link        | 向未被访问的链接添加样式               |   1 |
| :visited     | 向已被访问的链接添加样式               |   1 |
| :first-child | 向元素的第一个子元素添加样式           |   2 |
| :lang        | 向带有指定 lang 属性的元素添加样式       |   2 |

** CSS 常用样式
*** 背景色
可以使用 background-color 属性为元素设置背景。这个属性接受任何合法的颜色值。
=p{background-color:gray;}=
可以为所有元素设置背景色，这包括 body 一直到 em 和 a 等行内元素
back-ground 不能继承，其默认值是 transparent。
#+begin_src html
<html>
  <head>
    <style type="text/css">
      body {background-color:yellow}
      h1 {background-color:#00ff00}
      h2 {background-color:transparent}
      p {background-color:rgb(255,0,255)}
      p.no2 {background-color:gray;padding:20px;}
    </style>
  </head>
  <body>
    <h1>这里是标题1</h1>
    <h2>这里是标题2</h2>
    <p>这是段落</p>
    <p class="no2">这个段落设置了内边距。</p>
  </body>
</html>
#+end_src
*** 背景图像
要把图像放入背景，需要使用 background-image 属性，其默认值是 none，表示背景上没有放置任何图像。如果需要设置一个背景图像，必须为这个属性设置一个 url 值：
=body{background-image:url(/i/eg_bg_04.gif);}=
大多数背景都应用到 body 元素，不过并不仅限于此。
下面例子为一个段落应用了一个背景，而不会对文档的其他部分应用背景。
=p.flower{background-image:url(/i/eg_bg_03.gif);}=
设置可以为行为元素设置背景图像，下面的例子为一个链接设置了背景图像：
=a.radio{background-image:url(/i/eg_bg_07.gif);}=
*** 缩进文本
把 web 页面上的段落第一行缩进，是一种最常用的文本格式化效果。该属性可以被继承。
CSS 提供了 text-indent 属性，该属性可以方便的实现文本缩进。
=p{text-indent:5em;}=
注意：一般来说，可以为所有块级元素应用 text-indent，但无法将该属性应用于行内元素，图像之类的替换元素也无法应用 text-indent 属性。不过如果一个块级元素（比如段落）的首行中有一个图像，它会随着其余文本移动。
提示：如果想把一个内元素的第一行“缩进“，可以用左内边距或者外边距创造效果。
#+begin_src html
div#outer (width:500px)
div#inner {text-indent:10%}
p {width:200px;}

<div id="outer">
<div id="inner">some text.some text. some text.
<p>this is a paragraph.</p>
</div>
</div>
#+end_src
以上标记中的段落也会缩进 50 像素，这是因为段落继承了 id 为 inner 的 div 元素的缩进值。
*** 水平对齐的方式
text-align 是一个基本的属性，它会影响一个元素中的文本行互相之间的对齐方式。值 left、right 和 center 会导致元素中的文本分别左对齐、右对齐和居中。默认值是 left。
=text_align:right=
text_align 不会控制元素的对齐，而只影响内部内容。元素本身不从一端移到另一端，只是其中的文本受影响。
*** 字间隔
word-spacing 属性可以改变字（单词）之间的标准间隔。其默认值 normal 与设置值为 0 是一样的。word-spacing 属性接受一个正长度值或负长度值。如果提供一个正长度值，那么字之间的间隔就会增加。为 word-spacing 设置一个负值，会把它拉近
#+begin_src css
p.spread {word-spacing:30px;}
p.tight {word-spacing:-0.5em;}
#+end_src
#+begin_src html
<p class="spread">
This is a paragraph. The spaces between words will increase.
</p>
<p class="tight">
This is a paragraph, the spaces betweenn words will decrease.
</p>
#+end_src
*** 字母间隔
letter-spacing 属性与 word—spacing 的区别在于，字母间隔修改的是字符或字母之间的间隔。
与 word—spacing 属性一样，letter-spacing 属性的可取值包括所有长度，默认关键字是 normal。
输入的长度值会使字母之间的间隔增加或减少指定的量：
#+begin_src css
h1 {letter-spacing:-0.5em}
h4 {letter-spacing:20px}
#+end_src
#+begin_src html
<h1>This is header 1</h1>
<h4>This is header 4</h4>
#+end_src
*** 字符转换
text-transform 属性处理文本的大小写，这个属性有 4 个值：none/uppercase/lowercase/capitalize 默认值 none 对文本不做任何改动，将使用源文档中的原大小写。顾名思义，uppercase 和 lowercase 将文本转化为全部大写或者全部小写字符。最后，capitalize 只对每个单词的首字母大写。
=h1{text-transform:uppercase}=
这会把所有 h1 中的字符大写！
*** 文本装饰
text-decoration 属性用来给文本进行一些特殊装饰。
text-decoration 可取值：none/underline/overline/linethrough
underline 会对元素加下划线。overline 的作用恰好相反，会在文本的顶端话一个上划线。line-through 则在文本中间画一个贯穿线。none 值会关闭原本应用到一个元素上的所有装饰。
通常，无装饰的文本是默认外观，但也不总是这样。例如，链接默认地会有下划线。如果想去掉超链接的下划线，可以使用以下 CSS 来做到这一点：
=a {text-decoration:none;}=
**** 文本更多属性
| 属性            | 描述                                                   |
|-----------------+--------------------------------------------------------|
| color           | 设置文本颜色                                           |
| direction       | 设置文本方向                                           |
| line-height     | 设置行高                                               |
| letter-spacing  | 设置字符间距                                           |
| text-align      | 对齐元素中的文本                                       |
| text-decoration | 向文本添加修饰                                         |
| text-indent     | 缩进元素中文本的首行                                   |
| text-shadow     | 设置文本阴影。CSS2 包含该属性，但是 CSS2.1 没有保留该属性 |
| text-transform  | 控制元素中的字母                                       |
| unicode-bidi    | 设置文本方向                                           |
| white-space     | 设置元素中空白的处理方式                               |
| word-spacing    | 设置字间距                                             |
*** CSS 字体
CSS 字体属性定义文本的字体系列，大小，风格（如斜体）和变形（如小型大写字母），
在 CSS 中，有两种不同类型的字体系列名称：
1. 通用字体系列-拥有相似外观的字体系统（比如"Serif"或者"Monospace")
2. 特定字体系列-具体的字体系列（比如"Times"或"Courier")
除了各种特定的字体系列外，CSS 定义了 5 种通用字体系列：
— Serif 字体
- Sans-serif 字体
- Monospace 字体
— Cursive 字体
- Fantasy 字体
每种通用字体系列都包含了一定数量的特定字体
*** 使用通用字体系列
如果希望文档使用一种 sans-serif 字体，但是并不关心是哪一种字体，以下就是一个合适的声明：
=body {font-family:sanes-serif;}=
这样用户代理就会从 sans-serif 字体系列中选择一个字体（如 Helvetica），并将其应用到 body 元素。因为有继承，这种字体还将应用到 body 元素包含的所有元素，除非有一种更特定的选择器将其覆盖。
*** 指定字体系列
除了使用通用的字体系列，还可以通过 font-family 属性设置更具体的字体。
下面的例子为所有 h1 元素设置了 Georgia 字体：
=h1 {font-family:Georgia;}=
这样的规则有可能产生一个问题，如果用户没有安装 Georgia 字体，就只能使用用户的默认字体来显示 h1 元素，而不是你想要的字体。可以通过结合特定字体名和通用字体系列来解决这个问题：
=h1 {font-family:Georgia, serif;}=
*** 字体加粗
font-weight 属性设置文本的粗细，使用 bold 关键字可以将文本设置为粗体。
关键字 100-900 为字体指定了 9 级加粗度。如果一个字体内置了这些加粗级别，那么这些数字就直接映射到预定义的级别。100 对应最细的字体变形，900 对应最粗的字体变形。数字 400 等价于 Normal。而 700 等价于 bold。
如果将元素的加粗设置为 bolder，浏览器会设置比所继承更粗的一个字体加粗。与此相反，关键词 lighter 会导致浏览器将粗度下移而不是上移。实例如下：
#+begin_src css
p.normal {font-weight:normal;}
p.thick {font-weight:bold;}
p.thicker {font-weight:900;}
#+end_src
*** 字体大小
font-size 属性设置文本的大小。font-size 值可以是绝对或者相对值。
绝对值：将文本设置为指定的大小。不允许用户在所有浏览器中改变文本大小（不利于可用性）
相对大小：相对于周围的元素来设置大小。允许用户在浏览器改变文本大小
注意：如果没有规定字体大小，普通文本（比如段落）的默认大小是 16 像素（16px=1em）。
#+begin_src html
<html>
  <head>
    <style type="text/css">
      h1 {font-size:60px;}
      h2 {font-size:40px;}
      p {font-size:14px;}
    </style>
  </head>
  <body>
    <h1>This is heading 1</h1>
    <h2>This is heading 2</h2>
    <p>This is a paragraph.</p>
    <p>This is a paragraph.</p>
  </body>
 </html>
#+end_src

#+begin_src css
: p.normal {font-weight:normal;}
: p.thick {font-weight:bold;}
: p.thicker {font-weight:900;}
#+end_src
**** 使用像素来设置字体大小
通过像素设置文本大小，可以对文本进行完全控制：
#+begin_src css
h1 {font-size:60px;}
h2 {font-size:40px;}
h3 {font-size:14px;}
#+end_src
虽然可以通过浏览器的缩放工具调整文本大小，但是这实际上是对整个页面的调整，而不仅限于文本。
**** 使用 em 来设置字体大小
如果要避免在 IE 中无法调整文本的问题，许多开发者使用 em 单位代替 pixels。在设置字体大小是，em 的值相对于副元素的字体大小改变。浏览器中默认的文本大小是 16 像素。因此 1em 的默认尺寸是 16 像素。
可以使用下面这个公式将像素转化为 em： pixels/16=em 的值相对于副元素的字体大小改变
（注：16 等于父元素的默认字体大小，假设父元素的 font-size 为 20px，那么公式需要改为：
pixels/20=em）
#+begin_src css
h1 {font-size:3.75em;} /* 60px/16=3.75em */
h2 {font-size:2.75em;} /* 40px/16=2.5em */
p {font-size:0.87em;} /* 14px/16=0.87em */
#+end_src
在上面的例子中，以 em 为单位的文本大小与前一个栗子中以像素计的文本是相同的。不过，如果使用 em 单位，则可以在所有浏览器中调整文本大小。
但不幸的是，在 IE 中仍然存在问题，在重设文本大小是，会比正常的尺寸更大或更小。
**** 结合使用百分比和 EM
在所有浏览器中均有效的方案是 body 元素（父元素）以百分比设置默认的 font-size 值：
#+begin_src css
body {font-size:100%;}
h1 {font-size:3.75em;}
h2 {font-size:2.5em;}
p {font-size:0.875em;}
#+end_src
这样，在所有浏览器中，可以显示相同的文本大小，并允许所有浏览器缩放文本的大小。
**** CSS 字体更多属性
| 属性             | 描述                                                   |
|------------------+--------------------------------------------------------|
| font             | 简写属性，作用是把所有针对字体的属性设置在一个声明中。 |
| fon-family       | 设置字体系列。                                         |
| font-size        | 设置字体的尺寸。                                       |
| font-size-adjust | 当首选字体不可用时，智能缩放，已删                     |
| font-stretch     | 对字体进行水平拉伸。已删                               |
| font-style       | 设置字体风格。                                         |
| font-variant     | 以小型大写字体或者正常字体显示文本                     |
| font-weight      | 设置字体粗细                                                 |
*** 设置超级链接<a>标签的样式
能够设置链接样式的 CSS 属性有很多种（例如 color，font-family，background 等等）。
但链接的特殊性在于能够根据它们所处的状态来设置它们的样式。
链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接上方
a:active - 链接被点击的时候
当链接的不同状态设置样式时，必须按照以下次序规则。
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后
**** 文本修饰
text-decoration 属性大多用于去掉链接中的下划线：
#+begin_src css
a:link {text-decoration:none;}
a:visited {text-decoration:none;}
a:hover {text-decoration:underline;}
a:active {text-decoration:underline:}
#+end_src
**** 背景色
#+begin_src
background-color属性规定链接的背景色：
a:link {bakcground-color:#B2FF99;}
a:visited {background-color:#FFFF85;}
a:hover {background-color:#FF704D;}
a:active {background-color:#FF704D;}
#+end_src
**** CSS 列表样式
CSS 列表属性可以放置、改变列表项标志，或者将图像作为列表项标志。
*列表类型*
要影响列表的样式，最简单的办法就是改变其标志类型。
要修改列表项的标志类型，可以使用属性 life-style-style：
=ul {list-sytle-type:squre}=
上面的声明把无序列表中的列表标志设置为方块。
最最重要的是，下面这种可以去掉列表的标志：
=ul {list-style-type:none}=
#+begin_src html
<html>
    <head>
    <style type="text/css">
    ul.disc {list-style-type:disc}
    ul.circle {list-style-type:circle}
    ul.square {list-style-type:none}
    ul.none {list-style-type:none}
    </style>
    </head>
    <body>
    <ul class="disc">
    <li>咖啡</li>
    <li>茶</li>
    <li>可口可乐</li>
    </ul>

    <ul class="circle">
    <li>咖啡</li>
    <li>茶</li>
    <li>可口可乐</li>
    </ul>

    <ul class="square">
    <li>咖啡</li>
    <li>茶</li>
    <li>可口可乐</li>
    </ul>
    <ul class="none">
    <li>咖啡</li>
    <li>茶</li>
    <li>可口可乐</li>
    </ul>
    </body>
</html>
#+end_src

现在比较常用的的是和 HTML 一起用
=<li><a href="#">咖啡</a></li>=
**** 列表项图片
有时，常规的标志是不够的。可能想对各标志使用一个图像，这可以利用 list-style-image 属性做到：
=ul li {list-style-image:ulr(xxx.gif)}=
只需要简单的使用一个 url()值，就可以使用图像作为标志。
**** 列表标志位置
CSS2.1 可以确定标志出现列表项内容之外还是内容内部。这是利用 life-style-position 完成的。
**** 简单列表样式
为简单期间，可将以上 3 各列表样式属性合并为一个方便的属性：life-style，就想这样
=li {life-style : url(example.gif) square inside}=
life-style 的值可以按任何顺序列出，而且这些值都可以忽略，只要提供一个值其它的就会填入其默认值。(图片变成了方块的大小)
*** CSS 表格样式
**** 表格边框
设置表格边框，使用 border 属性。下面的例子为 table、th 以及 td 设置了蓝色边框：
=table,th,td {boarder:1px solid bule;}=
**** 折叠边框
border-collapse 属性设置是否将表格边框折叠为单一边框：
#+begin_src css
table {border-collapse:collapse;}
table,th,td {border:1px solid black;}
#+end_src
**** 表格宽度和高度
通过 width 和 height 属性定义表格宽度和高度。
下面的列子将表格宽度设置为 100%(父元素），同时将 th 元素的高度设置为 50px：（其中 height 设置 px 可以但是设置百分比无效）
#+begin_src css
table {width:100%;}
th {height:50px;}
#+end_src
**** 表格文本对齐
text—align 和 vertical-align 属性设置表格中文本的对齐方式。
text-align 属性设置水平对齐方式，比如左对齐、右对齐或者居中：
=td {text-align:right;}=
vertical-align 属性设置垂直对齐方式，比如顶部对齐、底部对齐或者居中对齐：
=td{height:50px; vertical-align:bottom;}=
**** 表格内边距
如需控制表格中内容与边框的距离，请为 td 和 th 元素设置 padding 属性：
=td {padding:15px;}=
**** 表格颜色
下面的例子设置边框的颜色，以及 th 元素的文本和背景颜色：
#+begin_src css
table,td,th {border:1px solid green:}
th {background-color:green; color:white;}
#+end_src
** CSS 框模型
*** 框模型概念
CSS 框模型（box model）规定了元素框处理元素、内边距、边框和外边距的方式。
元素框的最内部是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。
提示：背景应用于由内容和内边距、边框组成的区域。
内边距、边框和外边距都是可选的，默认值是零。但是，许多浏览器有默认的外边距和内边距设置。可以通过将 margin 和 padding 设置为零来清楚这些浏览器样式。
=* {margin:0; padding:0;}=
element:元素，padding：内边距，border：边框，margin：外边框

在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。
假设框的每个边上有 10 各像素的外边距和 5 各像素的内边距。如果希望这个元素框达到 100 各像素，就需要将内容的宽度设置为 70 像素。
=#box {width:70px;margin:10px:padding:5px;}=
提示：内边距、边框和外边距可以应用于同一个元素的所有边，也可以应用于单独的边。
提示：外边距可以是负值，而且在很多情况下都要使用负值的外边框。
[[file:css-box-model.png][Box-model]]
*** CSS 内边距
元素的内边距在边框和内容去之间。控制该区域的属性是 padding 属性。
padding 属性接受长度值和百分比值，但不允许使用负值。
例如，如果希望所有 h1 元素的各边都有 10 像素的内边距，只需要这样：
=h1 {padding:10px;}=
还可以按照上，右，下左的顺序分别设置各边的内边距，各边均可以使用不同的单位或百分比值：
=h1 {padding:10px 0.25em 2ex 20%;}=
=h1 {padding: 10px 20px;}= 表示上下同时 10px，左右同时 20px
**** 单位内边距属性
也可以通过下面四个单独的属性，分别设置上、右、下、左内边距：
padding-top
padding-right
padding-bottom
padding-left
下面的规则实现的效果与前面的简写规则是完全相同的：
#+begin_src css
h1 {
    padding-top:10px;
    padding-right:0.25em;
    padding-bottom:2ex;
    padding-left:20%;
}
#+end_src
**** 内边距的百分比数值
百分数值是相对于其父元素的 width 计算的，这一点与外边距一样。
下面这条规则把段落的内边距设置为父元素 width 的 10%
=p {padding:10%;}=
例如：如果一个段落的父元素是 div 元素，那么它的内边距要根据 div 的 width 来计算。
#+begin_src html
<div style="width:200px";>
  <p>This paragraph is contained within a DIV that has a width of 200 pixels.</p>
</div>
#+end_src
注意：上下内边距与左右内边距一致；即上下内边距的百分数会相对于父元素宽度设置，而不是相对于高度。
*** 元素的边框
围绕元素内容和内边距的一条或多条线，可以设置元素边框的样式、宽度和颜色
**** 边框的样式
CSS 的 border-style 属性定义了 10 各不同的非 inherit 样式，包括 none。
例如，可以把一幅图片的边框定义为 outset，使之看上去像是“凸起按钮”：
=a:link img{border-style:outset;}=
也可以同时为一个边框定义多个样式，例如：
=p.aside {border-style:solid dotted dashed double;}=
上面这条规定定义了四种边框样式：实现上边框、点线右边框、虚线下边框和一个双线下边框。
这里的值采用了 top-right-bottom-left 的顺序，讨论用多个值设置不同内边距也见过这个顺序。
如果只想为元素框的某一个设置边框样式，而不是设置所有 4 个边的边框样式，可以使用单边边框样式属性：border-top-style/border-right-style/border-bottom-style/border-left-style

CSS 边框模型
#+begin_src html
<html>
  <head>
    <style type="text/css">
      p.dotted {border-style:dotted}
      p.dashed {border-style:dashed}
      p.solid {border-style:solid}
      p.double {border-style:double}
      p.groove {border-style:groove}
      p.ridge {border-style:ridge}
      p.inset {border-style:inset}
      p.outset {border-style:outset}
    </style>
  </head>
  <body>
  <p class="dotted">A dotted border</p>
  <p class="dashed">A dashed border</p>
  <p class="solid">A solid border</p>
  <p class="double">A double border</p>
  <p class="groove">A groove border</p>
  <p class="ridge">A ridge border</p>
  <p class="inset">A inset border</p>
  <p class="outset">A outset bordr</p>
  </body>
</html>
#+end_src
**** 边框的宽度
通过 border-width 属性为边框指定宽度。
为边框指定宽度有两种方法：可以指定长度值，比如 2px 或者 0.1em；或者使用 3 个关键字之一，它们分别是 thin、medium（默认值）和 thick，例如：
=p {border-style:solid; border-width:5px;}=
=p {border-style:solid; border-width:thick;}=
可以按照 top-right-bottom-left 的顺序设置元素的各边边框：
=p {border-style:solid;border-width:15px 5px 15px 15px;}=
也可以通过下列属性分别设置边框各边的宽度：
border-top-width
border-right-width
border-bottom-width
border-left-width

**** 没有边框
如果把 border-style 设置为 none 会出现什么情况呢：
=p {border-style:none; border-width:50px;}=
尽管边框的宽度是 50px，但是边框样式设置为 none。在这种情况下，不仅边框的样式没有了，其宽度也变为了 0.边框小时了，为什么呢？
这是因为如果边框样式为 none，即边框根本不存在，那么边框就不可能有宽度，因此边框宽度自动设置为 0，而不论原先定义的是什么。
忘记声明边框样式是一个常犯的错误。根据规则，以下所有 h1 元素都不会有任何边框，更不用说 20 像素宽了。
=h1 {border-width:20px;}=
由于 border-style 的默认值是 none，如果没有声明样式，就相当于 border-style：none。因此，如果希望边框出现就必须声明一个边框样式

**** 边框的颜色
border-color 属性，它一次可以接受最多 4 个颜色值。可以使用任何类型的颜色值，例如可以是命名颜色，也可以是十六进制和 RGB 值：
=p {border-style:solid; border-color:blue rgb(25%,35%,45%) #909090 red;}=
**** 定义单边颜色
还有一些单边边框颜色属性，它们的原理与单边样式和宽度属性相同：
border-top-color
border-right-color
border-bottom-color
border-left-color
要为 h1 元素指定实现黑色边框，而右边框为实线红色，可以这样指定：
#+begin_src css
h1 { border-style:solid;
     border-color:black;
     border-right-color:red;
        }
#+end_src
***  外边距
围绕在元素边框的空白区域是外边距，设置外边距会在元素外创建额外的空白；
设置外边距的方法是使用 margin 属性，这个属性接受任何长度单位、百分数甚至负值。
margin 可以设置为 auto，更常见的做法是为外边距设置长度值，下面的声明在 h1 元素的各个边上设置了 1/4 英寸宽的空白：
=h1 {margin:0.25in;}=
下面的例子为 h1 元素的四个边分别定义了不同的外边距，所使用的长度单位是像素（px）：
=h1 {margin:10px 0px 15px 5px:}=
与内边距设置相同，这些值的顺序是上外边距开始围绕着元素顺时针旋转的。
=margin:top right bottom left=
另外还可以为 margin 设置一个百分比数值：
=p {margin: 10%;}=
**** 单边外边距属性
可以使用下列任何一个属性来只设置相应上的外边距，而不直接影响所有其他外边距；
margin-top, margin-left,margin-bottom, margin-left
一个规则中可以使用多个这种单边属性，例如：
#+begin_src css
h2 {
    margin-top:20px;
    margin-right:30px;
    margin-bottom:30px;
    margin-left:20px;
}
#+end_src
而 margin 的默认值是 0，所以如果没有为 margin 声明一个值，就不会出现外边框。但是，在世纪钟，浏览器对许多元素已经提供了预定的样式，外边距也不例外。例如，在支持 CSS 的浏览器中，外边距会在每个 p 元素的上面和下面生成“空行”。因此如果没有 p 元素声明外边距，浏览器可能会自己应用一个外边距。当然，只要你特别作了声明，就会覆盖默认样式。
**** /*外边距合并问题*/
外边距合并指的是，当两个垂直外边距相遇时，它们将合并成一个外边距，合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
当一个元素出现在另一个元素上面是，第一个元素的下外边距与第二个元素的上外边距发生合并
还有更复杂的其他集中情况合并。
注释：只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框、或绝对定位之间的外边框不会合并

** CSS 定位和浮动
CSS 为定位和浮动提供了一些属性，利用这些属性，可以建立列式布局，将布局的一部分与另一部分重叠，还可以完成多年来通常需要使用多个表格才能完成的任务。
定位的基本思路很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者对于父元素、另一个元素甚至浏览器窗口本身的位置。
另一方面，CSS1 中首次提出了浮动，浮动不完全是定位，不过它当然也不是正常流布局。
*** 一切皆为框
div，h1 或 p 元素常常被成为块级元素，这意味着这些元素显示为一块内容，即“边框”，与之相反，span 和 strong 等元素成为“行内元素”，这是因为它们的内容显示在行中，即“行内框”
可以使用 display 属性改变生成的框的类型。通过将 display 属性设置为 block，可以让行内元素（比如<a>元素），表现的像块级元素一样。还可以通过把 display 设置为 none，让生成的元素根本没有框，也就是在页面上将元素隐藏起来
=p {display:none}=
*** CSS 定位机制
CSS 有三种基本的定位机制：普通流、浮动和绝对位。
**** 除非专门指定，否则所有框都在普通流中定位。也就是说，普通流中的元素的位置由元素在 HTML 中的位置决定，大家按顺序从上往下，从左往右逐一排列。
块级框从上到下一个接一个地排列，框之间的垂直距离是由框的垂直外边距计算出来。
行内框在一行中水平不止。可以使用水平内边距、边框和外边距调整它们的间距。但是，垂直内边距、边框和外边距不影响行内框的高度。
由一行形成的水平框称为行框（Line Box），行框的高度总是足以容纳它包含的所有行内框。不过，设置行高可以增加这个框的高度。
*** CSS 定位属性
通过使用 position 属性，可以选择 4 种不同类型的定位，这回影响元素框生成的方式。position 属性值的含义：
**** static
元素框正常生成，块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中，默认设置。
**** relative
元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。
**** absolute
元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者初始包含块。元素原先在正常文档中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原本它在正常流中生成何种类型的框。
**** fixed
元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身
**** CSS 相对定位
设置为相对定位的元素框会偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。
相对定位是一个非常容易掌握的概念，如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动。
如果将 top 设置为 20px，那么框将在*原位置*顶部下面 20 像素的地方。如果 left 设置为 30 像素，那么会在元素左边创建 30 像素的空间，也就是将元素向右移动。
#+begin_src css
#box_relative {
    position:relative;
    left:30px;
    top:20px;
}
#+end_src
注意，在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间，因此，移动元素会导致它覆盖其他框。
#+begin_src html
<html>
  <head>
    <style type="text/css">
      h2.pos_left
      {
      position:relative;
      left:-20px}
      h2.pos_right{
      position:relative;
      left:20px
      }
      </style>
    </head>
  <body>
    <h2>这是位于正常位置的标题</h2>
    <h2 class="pos_left">这个标题相对于其正常位置向左移动</h2>
    <h2 class="pos_right">这个标题相对于其正常位置向右移动</h2>
    <p>相对定位会按照元素的原始位置对该元素进行移动。</p>
    <p>样式“left:-20px“从元素的原始左侧位置进行移动。</p>
    <p>样式"left:20px"向元素的原始左侧位置增加20像素。</p>
  </body>
#+end_src
不管何种 position 定位方式，定位距离都是使用上右下左四个属性来设置的。垂直和水平各有一个值就可以定位，不需要 4 个值全设置。
**** CSS 绝对定位
设置为绝对定位的元素框从文档流完全删除，并相对于其包含块定位，包含块可能是文档中的另一个元素或初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像该元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。
绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与相对定位不同，相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。
#+begin_src css
#box_relative {
    position:absolute;
    left:30px;
    top:20px;
}
#+end_src
*绝对定位的元素的位置相对于最近的已定位祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块。*
注释：根据用户代理的不同，最初的包含块可能是画布或 HTML 元素。
提示：因为绝对定位的框与文档流无关，可能会覆盖页面上的其他元素。可以通过设置 z-index 属性来控制这些框的对方次序。
**** fixed 窗口固定
与前两者不一样的是，fixed 属性值将元素在窗口或 html 页面内固定，其表现的就像脱离文档，位置永远不变！常用作“返回顶部”侧边工具栏等不随着滚动条变化的按钮！
#+begin_src html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>css_test</title>
    <style>
      div {
        height:1500px;
        background-color:greeen;
      }
      span {
        border:2px solid black;
        bakcground-color:white;
        position:fixed;
        botoom:50px;
        right:50px;
      }
    </style>
  </head>
  <body>
    <div>
      <span>返回顶部！</span>
    </div>
  </body>
 </html>
#+end_src
**** 内容溢出
当元素内容太长而超出规定区域时，如何使用滚动条来显示元素内溢出的内容。
如果元素中的内容超出了给定的宽度和高度属性，overflow 属性可以确定是否显示滚动条等行为。
#+begin_src html
<html>
  <head>
    <style type="text/css">
      div {
        background-color:#00FFFF;
        width:150px;
        height:150px;
        overflow:auto
      }
    </style>
  </head>
  <body>
    <p>如果元素中的内容超出了给定的宽度和高度属性，overflow属性可以确定是否显示滚动条行为。</p>
    <div>这个属性定义溢出元素内容区的内容会如何处理，如果值为scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条，默认值是visible</div>
  </body>
 </html>
#+end_src
**** Z-index
可用于将一个元素放置于另一个元素之后，类似于 ppt 的置于顶层或者底层或下移上一层次的功能。
#+begin_src html
<html>
<head>
<style type="text/css">
img.x
{
position:absolute;
left:0px;
right:0px;
z-index:-1;
}
</style>
</head>

<body>
<h1>这是一个标题</h1>
<img class="x" src="/i/eg_mouse.jp" />
<p>默认的z-index是0，z-index:-1拥有更低的优先级。</p>
</body>
</html>
#+end_src

**** CSS 定位属性
| 属性           | 描述                                                       |
|----------------+------------------------------------------------------------|
| position       | 把元素放到一个静态的、相对的、绝对的、或固定的位置中。     |
| top            | 定义了一个定位元素的上外距边界语气包含块上边界之间的偏移。 |
| right          | 定义了定位元素右外边距边界与其包含块右边界之间的偏移       |
| bottom         | 定义了定位元素下外边距边界与其包含块下边界之间的偏移       |
| left           | 定义了定位元素左外边距边界与其包含块左边界之间的偏移。     |
| overflow       | 设置当元素的内容溢出其区域时发生的事情                     |
| clip           | 设置元素的形状，元素被剪入这个形状之中，然后显示出来       |
| vertical-algin | 设置元素的垂直对齐方式                                     |
| z-index        | 设置元素的堆叠顺序                                         |

*** CSS 浮动
所谓的浮动，就是让元素跳出正常的布局流，浮动在上层的一个框内。
浮动的框可以向左或向右移动，知道它的外边缘碰到包含框或另一个浮动框的边框位置。
由于浮动框不再文档的普通流中，所以文档的普通流中的块框表现的就像浮动框不存在一样。
**** 定义和用法
float 属性定义元素在哪个方向浮动。在 CSS 中，任何元素都可以浮动，浮动元素会生成一个块级框，而不论它本身是何种元素。
如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。
| 值      | 描述                                               |
|---------+----------------------------------------------------|
| left    | 元素向左浮动                                       |
| right   | 元素向右浮动                                       |
| none    | 默认值，元素不浮动，并会显示其在文本中出现的问题。 |
| inherit | 规定应该从父元素继承 float 属性的值。                |
#+begin_src css
div {
float:left;
}
#+end_src
**** 水平布置的菜单
#+begin_src html
<html>
  <head>
    <meta charset="utf-8">
    <style type="text/css">
     ul{
       float:left;
       width:100%;
       padding:0;
       margin:0;
       life-style-type:none;
     }
     a
     {
       float:left;
       width:7em;
       text-decoration:none;
       color:white;
       background-color:purple;
       padding:0.2em 06em;
       border-right:1px solid white;
     }
     a:hover{background-color:#ff3300}
     li {display:inline}
    </style>
  </head>
  <body>
    <ul>
      <li><a href="#">Link one</a></li>
      <li><a href="#">Link two</a></li>
      <li><a href="#">Link three</a></li>
      <li><a href="#">Link four</a></li>
    </ul>

    <p>在上面的例子中，我们把ul和a元素向左浮动，li元素显示为行内无元素（元素前后没有换行），这样就可以使列表拍成一行，ul元素的宽度是100%，列表中的每个超链接的宽度是7em（当前尺寸的7倍），我们添加了颜色和边框，以便使其更漂亮。
    </p></body></html>
#+end_src
**** 使用浮动来创建拥有页眉、页脚、左侧目录和主题内容的首页。
#+begin_src html
<!doctype html>
<html class="no-js" lang="">
  <head>
    <style type="text/css">
      div.container {
      width:100%;
      margin:0px;
      border:1px solid gray;
      line-height:150%;
      }
      div.header,div.footer {
      padding:0.5em;
      color:white;
      background-color:gray;
      clear:left;
      }
      h1.header {
      padding:0;
      margin:0;
      }
      div.left{
      float:left;
      width:160px;
      margin:0;
      pading:1em;
      }
      div.content {
      margin-left:190px;
      border-left:1px solid gray;
      padding:1em;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header"><h1 class="header">大江东去</h1></div>
      <div class="left"><p>python<br/>Django<br/>Java
        <br/>machine learning</p></div>
      <div class="content">
        <h2>network</h2>
        <strong>helloworld</strong></div>
      <div class="footer">copyright</div>
    </div>
  </body>
</html>
#+end_src
