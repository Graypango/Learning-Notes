#+TITLE: HTML Note:

* How to use master HTML basic?
** HTML Basic Knowledge
*** HTML 标签
1. <> 标识符
2. 通常标签是成对出现的
3. HTML Tag
4. 标签开始是开始标签，第二个标签是结束标签
5. 开始和结束标签也被称为开放标签和闭合标签

*** HTML 文档类型 = 网页
1. 以<!DOCTYPE)声明其饮用类型 DTD(文档类型定义），规定了标记语言的规则
2. 好几种 DOCTYPE，每种都会声明使用的 HTML 是严格形还是过渡性模式
#+begin_src html
<!DOCTYPE html>
<html lang = 'en'>
<head>
<meta charset = "UTF-8">
<title>Title</title>
</head>
<body>
<hr />
<h1>haha</h1>
</body>
</html>
#+end_src
3. <html> 与</html>之间的文本描述网页
4. <body> 与</body>之间的文本是可见的页面内容
5. <h1>与</h1>之间的文本被显示为标题， <h1> ~ <h5> 是分成 5 个层级的标题
6. <p>与</p>之间的文本被显示为段落
7. lang 属性只有 h5 里面有，zh 表示中文
8. html 可以直接打印出来
9. Pycharm 也可以作为 html 的工具

*** HTML 元素
1. HTML 的元素是指从开始标签到结束标签的所有代码（tag)
2. 有些 HTML 没有内容，称为空元素例如<br/> 换行
3. 大多数 HTML 元素都可拥有属性和嵌套
4. 尽量不要发生没有意义的空格和空行
5. 即使忘记了结束标签，大多数浏览器也会正确工作，但是尽量不要这样做。
6. HTML 对大小写不敏感，建议全部用小写
7. 直接在 tag 中按多个空格是没有效果的

*** HTML 注释
1. 浏览器会忽略注释，可以利用注释在 HTML 中放置通知和提醒信息
#+begin_src html
<! -- This is a comment -->
<! -- 这是一段注释 -->
<p>这是一个段落。</p>
<! -- 记得在此处添加信息 -->
#+end_src
2. 条件注释
#+begin_src html
<! --[if IE 8]>
    ... some HTML here ...
<![endif] -->
上面的注释定义了只有Internet Explora执行的HTML
#+end_src
*** HTML 属性
1. 类似 Python 中的字典
2. HTML 可以拥有属性。属性可以包含元素的更多的信息。
3. 属性总以名称/值对的形式出现，比如 name=”Value“。
4. 属性总是在 HTML 元素的开始标签中规定
#+begin_src html
<h1 align="center">拥有关于对齐方式的附加信息。</h1>
#+end_src
5. 属性对于大小写不敏感，但是尽量用小写。
6. 常用的属性包括： (js)
| 属性  | 值               | 描述                                     |   |   |
|-------+------------------+------------------------------------------+---+---|
| class | classname        | 规定元素的类名（classname)               |   |   |
| id    | id               | 规定唯一的 id                            |   |   |
| style | style_definition | 规定元素的行内样式（inline style）       |   |   |
|  title    | text             | 规定元素的额外信息（可在工具提示中显示） |   |   |


*** 如何在 Emacs 下使用 HTML: 目前阶段
1. Emacs 自带的 HTML Mode 使用起来并不是那么的方便，而 web-mode 则是一个非常常用也 很强大的用于编辑前端代码的 Major Mode。
   具体查询位置如下：
   https://github.com/fxbois/web-mode
   https://web-mode.org/
2. 代码 fold 和 unfold C-c C-f
3. 写好的代码如何执行。
   目前还没好的办法，考虑到进度问题，目前使用 EWW 来执行，这个是可行的。
4. 文档自动对齐：
   M-x web-mode-buffer-indent
5. 在编辑模式上，按 Command-s 即可打开

*** TODO Org Mode 中的表格操作
DEADLINE: <2021-01-31 Sun> SCHEDULED: <2021-01-06 Wed>
1. 表格用 "|" 符号作为列分隔符，而在 Org mode 中，如果某一行文字的 第一个非空白符号 是 "|" 的话，就会被视作是一个表格，而 '-' 符号组成的分隔线之上的部分则被认为是各列的名称(不过列名并不是必须的)。
2. 一个完整的表格一般是有 header (就是表示列名那一行)的，要有 header 的话就需要 "-" 组成的分隔线，有两种方式可以插入分隔线。
   一种办法是新起一行，对齐后输入 "|-" ，即一个列分隔附跟一个连字符
   第二种办法是使用 "C-c -" 这个快捷键来快速插入，
   https://www.zmonster.me/2016/06/03/org-mode-table.html
   部分内容留在后面学习
3. 有点问题: 1.) 制表， 2.org 下的 to-do 有些问题

** HTML 的头部元素<head>
*** <head>元素
元素是所有头部元素的容器。这些标签可以添加到 head 部分：<head>, <base>, <link>, <meta>, <script>以及<style>
*** <title> 元素：定义文档的功能
title 元素在所有 HTML/XHTML 文档中都是必须的。
title 元素能够：
1. 定义浏览器工具栏中的标题
2. 提供页面被添加到收藏夹时显示的标题
3. 显示在搜索引擎结果中的页面标题
*** <meta> 元素: 元数据（metadata）是关于数据的信息
1. <meta>标签提供关于 HTML 文档的元数据。元数据不会显示在页面上。
2. meta 元素常被用于规定页面的描述、关键词、文档的作者、最后修改的时间以及其他元素。
3. <meta>标签始终位于 head 元素中。

#+begin_src html
<!DOCTYPE html>
<html lang = 'en'>
  <head>
    <meta charset = "UTF-8">//文档字符编码方式，不声明的话可能会乱码
    <title>apple</title>
  </head>
  <body>
    <hr />
    <h1 style ="color:red">haha</h1>
  </body>
</html>

#+end_src
*** content 属性：必须的属性
1. 提供了名称/值对中的值。 该值可以是任何有效的字符串。
2. 始终要和 name 属性或者 http-quiv 属性一起使用
3. 类 python 中的键值对，content 是键， 后者是值
例如
#+begin_src html
<meta name="keyword" content="HTML,ASP,PHP,SQL">
<!-- keywords:HTML, ASP, PHP, SQL-->

#+end_src
*** http-equiv， name， scheme 属性：可选的属性
| 属性      | 值          | 描述                                     |
|-----------+-------------+----------------------------------------|
| content   | some_text   | 定义与 http-equiv 或 name 属性相关的元信息  |
| http-quiv | content     | 把 content 属性关联到 HTTP 头部           |
|           | exprires    |                                        |
|           | refresh     |                                        |
|           | set-cookie  |                                        |
| name      | author      | 把 content 内容属性关联到一个名称           |
|           | description |                                        |
|           | keyword     |                                        |
|           | generator   |                                        |
|           | revised     |                                        |
|           | other       |                                        |
| scheme    | some_text   |  定义用于翻译 content 属性值的格式          |

*** http-equiv 属性：
1. http-equiv 属性为名称/值对提供了名称。并指示服务器在发送实际的文档之前先要在要传送给浏览器的 MIME 文档头部包含名称/值对。
2. 当服务器想浏览器发送文档时，会先发送许多名称/值对。虽然有些服务器会发送许多这种名称/值对，但是所有服务器至少要发送一个： content-type：text/html。浙江高速浏览器准备接受一个 HTML 文档。
3. 使用带有 http-equiv 属性的<meta>标签时，服务器将把名称/值对添加到发送给浏览器的内容头部。例如：添加：
   <meta http-equiv="charset" content="iso-8859-1">
   <meta http-equiv="expires" content="31 Dec 2008">
   这样发送到浏览器的头部就应该包含：
   content-type: text/html
   charset:iso-8859-1
   expires:31 Dec 2008
   当然，只有浏览器可以接受这些附加的头部字段，并能以适当的方式使用它们时，这些字段才有意义。
4. 有关 http-equiv 的用法：
   语法一：
   #+begin_src html
   <meta http-equiv="content-language" content="zh-CN"/>
   content-language为http-equiv属性值，用于标记页面语言，
   #+end_src

   语法二：
   #+begin_src html
   <meta http-equiv="content-type" content="text/html; charset=gb2312"/>
   content-language为http-equiv属性值，用于标记页面语言，
   #+end_src
 5. 删除过期的 cookie
    如果网页过期，那么删除存盘的 cookie
    #+begin_src html
    <meta http-equiv="set-cookie" content="cookievalue=xxx; expires=Sunday 20 October 2017 12:00 GMT; path="/>
    #+end_src
 6. 设置网页过渡效果
    当用户进入或者离开网页时呈现不同的效果
    #+begin_src html
    <meta http-equiv="page-enter" content="revealtrans(duration=5,transition=1)"/>
    <meta http-equiv="page-exit" content="revealtrans(duration=5,trasition=1)"/>
    #+end_src
    page-enter 表示进入页面时启用特效，page-exit 表示离开页面启用特效，duration 表示持续时间，transition 表示滤镜类型，表示想用哪种效果，取值 0-23


*** <base> 元素
<base>标签为页面上的所有连接规定默认地址或默认目标（target），使用的比较少：
#+begin_src html
<head>
<base href="http://www.baidu.com/images/"/>
<base target="_blank"/>
</head>
#+end_src
*** <link> 元素
简单来说类似 python 中的 input，比如网页标签上面的图标等等都能实现, 例如外部的头部文件 css
#+begin_src html
<link rel="stylesheet" type="text/css" herf="mystyle.css"/>
</head>
#+end_src

#+begin_src html
<link rel="shortcut icon" href="image/favicon.ico">
#+end_src
*** <style> 元素
用于为 HTML 文档定义样式信息
#+begin_src html
<head>
<style type="text/css">
body {background-color:yellow}
p {color:blue}
</style>
</head>
#+end_src

*** <script>元素
用于设置 Javascript 内容：
#+begin_src javascript
<scripr_src="//common.cnblogs.com/script/jquery.js" type="text/javascript"></script>
#+end_src

导入一个 js 的脚本
也可以这样写
#+begin_src javascript
<script>
var x = "haha",
</script>
#+end_src

** HTML 常用标签
*** HTML 标题
标题<heading>，是通过<h1> - <h6>等标签进行定义的。
默认情况下，HTML 会自动的在块级元素前后添加一个额外的空行，比如段落、标题元素前后
请确保 h 标签只用于标题。不要仅仅是为了产生粗体或者大号的文本而使用标题。
搜索引擎使用标题为网页的结构和内容编制索引。对提高搜索命中率很重要。
用户可以通过标题来快速浏览的网页，所以标题来呈现文档结构是很重要的。
应该将 h1 用作主标题（最重要的），其后是 h2（此重要的），再其次是 h3，以此类推。

/Notice/:
块级标签：展示的时候占一整行。典型的块级标签比如 h, p
行内标签: 占不到一整行。典型的有<span></span>(会以空格的方式把内容放在同一行)
*** HTML 水平线
<hr/ > 标签在 HTML 页面中创建水平线。 hr 元素可用于分隔内容。
*** HTML 段落
段落是通过<p>标签定义的。浏览器会自动的在段落前后添加空行。
#+begin_src html
<p> This is a paragraph </p>
<p> This is another paragraph </p>
#+end_src
*** HTML 换行
如果想要在不产生一个新段落的情况下进行换行（新行），可以使用<br />标签：
#+begin_src html
<p>This is<br />a para<br />graph with line breaks</p>
#+end_src
/空白字符：/ &nbsp;
所有的空格和空行都会被认为一个空格。这是空格的展示方式

*** HTML 超链接：<a> (必须附加协议名)
超链接可以是一个字，一个词，也可以是一副图像，可以点击这些内容来跳转新的文档。
或者当前文档中的某个部分。
当把鼠标指针移动到网页中的某个连接上时，箭头会变为一只小手。
通过使用<a>标签在 HTML 中创建连接，有两种使用<a>标签的方式：
- 使用 herf 属性-创建指向另一个文档的连接
- 使用 name 属性-创建文档的书签
#+begin_src html
<a href="url">link text</a>
#+end_src
href 属性规定链接的目标。开始标签和结束标签之间的文字被作为超级链接来显示。
#+begin_src html
<a herf="http://www.baidu.com/">百度首页</a>
#+end_src
使用 Target 属性，可以定义被链接的文件在何处显示。下面的这行会在新的窗口打开：
#+begin_src html
<a href="http://www.baidu.com/" target="_blank">百度首页</a>
#+end_src
